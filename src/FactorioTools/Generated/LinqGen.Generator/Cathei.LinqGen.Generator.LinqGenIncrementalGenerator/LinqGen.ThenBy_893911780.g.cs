// DO NOT EDIT
// Generated by LinqGen.Generator
#nullable disable
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Cathei.LinqGen;
using Cathei.LinqGen.Hidden;

namespace Cathei.LinqGen.Hidden
{
    // Non-exported Enumerable should consider anonymous type, thus it will be internal
    internal struct ThenBy_wHlUy : IInternalOrderedStub<global::Knapcode.FactorioTools.OilField.Location>
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal ThenBy_wHlUy(in OrderBy_QyMWc1 source, global::System.Func<global::Knapcode.FactorioTools.OilField.Location, int> selector_wHlUy) : this()
        {
            this.source_FT9VU3 = source.source_FT9VU3;
            this.selector_QyMWc1 = source.selector_QyMWc1;
            this.selector_wHlUy = selector_wHlUy;
        }

        internal struct Enumerator : IEnumerator<global::Knapcode.FactorioTools.OilField.Location>
        {
            private ThenBy_wHlUy parent;
            private global::Knapcode.FactorioTools.OilField.Location current;
            private bool state;
            internal Enumerator(in ThenBy_wHlUy parent) : this()
            {
                this.parent = parent;
                this.elements_wHlUy = new PooledListNative<global::Knapcode.FactorioTools.OilField.Location>(0);
                this.indices_wHlUy = new PooledListNative<int>(0);
            }

            private void InitState()
            {
                global::System.Collections.Generic.IEnumerator<global::Knapcode.FactorioTools.OilField.Location> cwHlUy_enumerator_FT9VU3 = default;
                cwHlUy_enumerator_FT9VU3 = parent.source_FT9VU3.GetEnumerator();
                var localElements_wHlUy = new PooledListNative<global::Knapcode.FactorioTools.OilField.Location>(0);
                while (cwHlUy_enumerator_FT9VU3.MoveNext())
                {
                    var current_FT9VU3 = cwHlUy_enumerator_FT9VU3.Current;
                    localElements_wHlUy.Add(current_FT9VU3);
                }

                var min_wHlUy = 0;
                var max_wHlUy = localElements_wHlUy.Count - 1;
                if (max_wHlUy >= min_wHlUy)
                {
                    indices_wHlUy = new PooledListNative<int>(localElements_wHlUy.Count);
                    for (int i = 0; i < localElements_wHlUy.Count; ++i)
                        indices_wHlUy.Add(i);
                    var sorter_wHlUy = new ThenBy_wHlUy.Sorter(localElements_wHlUy, parent.selector_QyMWc1, parent.selector_wHlUy);
                    sorter_wHlUy.PartialQuickSort(indices_wHlUy.Array, 0, localElements_wHlUy.Count - 1, min_wHlUy, max_wHlUy);
                    sorter_wHlUy.Dispose();
                }
                else
                {
                    localElements_wHlUy.Dispose();
                }

                elements_wHlUy = localElements_wHlUy;
                index_wHlUy = min_wHlUy - 1;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
            {
                if (!state)
                {
                    InitState();
                    state = true;
                }

                while (true)
                {
                    if ((uint)++index_wHlUy >= (uint)indices_wHlUy.Count)
                        break;
                    var current_wHlUy = elements_wHlUy[indices_wHlUy[index_wHlUy]];
                    current = current_wHlUy;
                    return true;
                }

                return false;
            }

            public global::Knapcode.FactorioTools.OilField.Location Current {[MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => current; }

            object IEnumerator.Current => Current;

            void IEnumerator.Reset() => throw new NotSupportedException();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose()
            {
                elements_wHlUy.Dispose();
                indices_wHlUy.Dispose();
            }

            [EditorBrowsable(EditorBrowsableState.Never)]
            internal PooledListNative<global::Knapcode.FactorioTools.OilField.Location> elements_wHlUy;
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal PooledListNative<int> indices_wHlUy;
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal int index_wHlUy;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Enumerator GetEnumerator() => new Enumerator(this);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public List<global::Knapcode.FactorioTools.OilField.Location> ToList()
        {
            var copy = this;
            PooledListNative<global::Knapcode.FactorioTools.OilField.Location> elements_wHlUy = new PooledListNative<global::Knapcode.FactorioTools.OilField.Location>(0);
            PooledListNative<int> indices_wHlUy = new PooledListNative<int>(0);
            int index_wHlUy = default;
            global::System.Collections.Generic.IEnumerator<global::Knapcode.FactorioTools.OilField.Location> cwHlUy_enumerator_FT9VU3 = default;
            cwHlUy_enumerator_FT9VU3 = copy.source_FT9VU3.GetEnumerator();
            var localElements_wHlUy = new PooledListNative<global::Knapcode.FactorioTools.OilField.Location>(0);
            while (cwHlUy_enumerator_FT9VU3.MoveNext())
            {
                var current_FT9VU3 = cwHlUy_enumerator_FT9VU3.Current;
                localElements_wHlUy.Add(current_FT9VU3);
            }

            var min_wHlUy = 0;
            var max_wHlUy = localElements_wHlUy.Count - 1;
            if (max_wHlUy >= min_wHlUy)
            {
                indices_wHlUy = new PooledListNative<int>(localElements_wHlUy.Count);
                for (int i = 0; i < localElements_wHlUy.Count; ++i)
                    indices_wHlUy.Add(i);
                var sorter_wHlUy = new ThenBy_wHlUy.Sorter(localElements_wHlUy, copy.selector_QyMWc1, copy.selector_wHlUy);
                sorter_wHlUy.PartialQuickSort(indices_wHlUy.Array, 0, localElements_wHlUy.Count - 1, min_wHlUy, max_wHlUy);
                sorter_wHlUy.Dispose();
            }
            else
            {
                localElements_wHlUy.Dispose();
            }

            elements_wHlUy = localElements_wHlUy;
            index_wHlUy = min_wHlUy - 1;
            using var list_pKRj54 = new PooledListNative<global::Knapcode.FactorioTools.OilField.Location>(0);
            try
            {
                while (true)
                {
                    if ((uint)++index_wHlUy >= (uint)indices_wHlUy.Count)
                        break;
                    var current_wHlUy = elements_wHlUy[indices_wHlUy[index_wHlUy]];
                    list_pKRj54.Add(current_wHlUy);
                }

                return list_pKRj54.ToList();
            }
            finally
            {
                elements_wHlUy.Dispose();
                indices_wHlUy.Dispose();
            }
        }

        internal struct Sorter : IComparer<int>, IDisposable
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public Sorter(PooledListNative<global::Knapcode.FactorioTools.OilField.Location> elements, global::System.Func<global::Knapcode.FactorioTools.OilField.Location, int> selector_QyMWc1, global::System.Func<global::Knapcode.FactorioTools.OilField.Location, int> selector_wHlUy)
            {
                this.comparer_QyMWc1 = default;
                keys_QyMWc1 = new PooledListNative<int>(elements.Count);
                for (int i = 0; i < elements.Count; ++i)
                    keys_QyMWc1.Add(selector_QyMWc1.Invoke(elements[i]));
                this.comparer_wHlUy = default;
                keys_wHlUy = new PooledListNative<int>(elements.Count);
                for (int i = 0; i < elements.Count; ++i)
                    keys_wHlUy.Add(selector_wHlUy.Invoke(elements[i]));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int Compare(int x, int y)
            {
                int result;
                result = comparer_QyMWc1.Compare(keys_QyMWc1[x], keys_QyMWc1[y]);
                if (result != 0)
                    return result;
                result = comparer_wHlUy.Compare(keys_wHlUy[x], keys_wHlUy[y]);
                if (result != 0)
                    return result;
                return x - y;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose()
            {
                keys_QyMWc1.Dispose();
                keys_wHlUy.Dispose();
            }

            public void PartialQuickSort(DynamicArrayNative<int> indexesToSort, int left, int right, int min, int max)
            {
                do
                {
                    int mid = PartitionHoare(indexesToSort, left, right);
                    if (left < mid && mid >= min)
                        PartialQuickSort(indexesToSort, left, mid, min, max);
                    left = mid + 1;
                }
                while (left < right && left <= max);
            }

            // Hoare partition scheme
            // This implementation is faster when using struct comparer (more comparison and less copy)
            private int PartitionHoare(DynamicArrayNative<int> indexesToSort, int left, int right)
            {
                // preventing overflow of the pivot
                int pivot = left + ((right - left) >> 1);
                int pivotIndex = indexesToSort[pivot];
                int i = left - 1;
                int j = right + 1;
                while (true)
                {
                    // Move the left index to the right at least once and while the element at
                    // the left index is less than the pivot
                    while (Compare(indexesToSort[++i], pivotIndex) < 0)
                        ;
                    // Move the right index to the left at least once and while the element at
                    // the right index is greater than the pivot
                    while (Compare(indexesToSort[--j], pivotIndex) > 0)
                        ;
                    // If the indices crossed, return
                    if (i >= j)
                        return j;
                    // Swap the elements at the left and right indices
                    (indexesToSort[i], indexesToSort[j]) = (indexesToSort[j], indexesToSort[i]);
                }
            }

            private ValueCompareToComparer<int> comparer_QyMWc1;
            private PooledListNative<int> keys_QyMWc1;
            private ValueCompareToComparer<int> comparer_wHlUy;
            private PooledListNative<int> keys_wHlUy;
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        internal global::System.Collections.Generic.IEnumerable<global::Knapcode.FactorioTools.OilField.Location> source_FT9VU3;
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal global::System.Func<global::Knapcode.FactorioTools.OilField.Location, int> selector_QyMWc1;
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal global::System.Func<global::Knapcode.FactorioTools.OilField.Location, int> selector_wHlUy;
    }
}

namespace Cathei.LinqGen
{
}