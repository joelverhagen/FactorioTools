// DO NOT EDIT
// Generated by LinqGen.Generator
#nullable disable
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Cathei.LinqGen;
using Cathei.LinqGen.Hidden;

namespace Cathei.LinqGen.Hidden
{
    // Non-exported Enumerable should consider anonymous type, thus it will be internal
    internal struct Gen_mKnyr3 : IInternalStub<global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection>
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal Gen_mKnyr3(global::System.Collections.Generic.List<global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection> source_mKnyr3) : this()
        {
            this.source_mKnyr3 = source_mKnyr3;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int Count() => this.source_mKnyr3.Count;
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal global::System.Collections.Generic.List<global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection> source_mKnyr3;
    }
}

namespace Cathei.LinqGen
{
    // Extension class needs to be internal to prevent ambiguous resolution
    internal static partial class LinqGenExtensions_Gen_mKnyr3
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Gen_mKnyr3 Gen(this global::System.Collections.Generic.List<global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection> source_mKnyr3) => new Gen_mKnyr3(source_mKnyr3);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection MinBy(this Gen_mKnyr3 source, Func<global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection, global::System.Tuple<bool, int, int, double>> selector)
        {
            int index_mKnyr3 = default;
            index_mKnyr3 = -1;
            global::System.Tuple<bool, int, int, double> resultKey_O0GsS = default;
            IComparer<global::System.Tuple<bool, int, int, double>> comparer = Comparer<global::System.Tuple<bool, int, int, double>>.Default;
            global::Knapcode.FactorioTools.OilField.AddPipes.PumpjackConnection result_O0GsS = default;
            while (true)
            {
                if ((uint)++index_mKnyr3 >= (uint)source.source_mKnyr3.Count)
                    break;
                var current_mKnyr3 = source.source_mKnyr3[index_mKnyr3];
                var key_O0GsS = selector.Invoke(current_mKnyr3);
                if (result_O0GsS is null || !(key_O0GsS is null) && 0 < comparer.Compare(resultKey_O0GsS, key_O0GsS))
                {
                    result_O0GsS = current_mKnyr3;
                    resultKey_O0GsS = key_O0GsS;
                }
            }

            return result_O0GsS;
        }
    }
}