-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeOilField
local ListLocation
System.import(function (out)
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ListLocation = System.List(KnapcodeOilField.Location)
end)
System.namespace("Knapcode.FactorioTools", function (namespace)
  -- <summary>
  -- Workaround for https://github.com/yanghuan/CSharp.lua/issues/443
  -- </summary>
  namespace.class("SetHandling", function (namespace)
    local ToDictionary, Distinct, ToSet, ToReadOnlySet, ToReadOnlySet1
    ToDictionary = function (items, context, keySelector, valueSelector, TItem, TValue)
      local dictionary = context:GetLocationDictionary1(items:getCount(), TValue)
      for _, item in System.each(items) do
        dictionary:Add(keySelector(item, TItem), valueSelector(item, TItem, TValue))
      end

      return dictionary
    end
    Distinct = function (locations, context)
      local set = context:GetLocationSet5(locations:getCount())
      local output = ListLocation(locations:getCount())
      for _, location in System.each(locations) do
        if set:Add(location) then
          output:Add(location)
        end
      end
      return output
    end
    ToSet = function (locations, context, allowEnumerate)
      return context:GetLocationSet10(locations, allowEnumerate)
    end
    ToReadOnlySet = function (locations, context)
      return context:GetReadOnlyLocationSet(locations)
    end
    ToReadOnlySet1 = function (locations, context, allowEnumerate)
      return context:GetReadOnlyLocationSet1(locations, allowEnumerate)
    end
    return {
      ToDictionary = ToDictionary,
      Distinct = Distinct,
      ToSet = ToSet,
      ToReadOnlySet = ToReadOnlySet,
      ToReadOnlySet1 = ToReadOnlySet1
    }
  end)
end)
