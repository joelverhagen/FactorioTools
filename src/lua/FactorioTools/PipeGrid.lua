-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeOilField
System.import(function (out)
  KnapcodeOilField = Knapcode.FactorioTools.OilField
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("PipeGrid", function (namespace)
    local GetNeighbors, __ctor1__, __ctor2__
    __ctor1__ = function (this, existing)
      System.base(this).__ctor__[1](this, existing, true)
    end
    __ctor2__ = function (this, width, height)
      System.base(this).__ctor__[2](this, width, height)
    end
    GetNeighbors = function (this, neighbors, id)
      local a = id:Translate(1, 0)
      local default
      if this:IsInBounds(a) and this:IsEmpty(a) then
        default = a
      else
        default = KnapcodeOilField.Location.getInvalid()
      end
      neighbors:set(0, default)

      local b = id:Translate(0, - 1)
      local extern
      if this:IsInBounds(b) and this:IsEmpty(b) then
        extern = b
      else
        extern = KnapcodeOilField.Location.getInvalid()
      end
      neighbors:set(1, extern)

      local c = id:Translate(- 1, 0)
      local ref
      if this:IsInBounds(c) and this:IsEmpty(c) then
        ref = c
      else
        ref = KnapcodeOilField.Location.getInvalid()
      end
      neighbors:set(2, ref)

      local d = id:Translate(0, 1)
      local out
      if this:IsInBounds(d) and this:IsEmpty(d) then
        out = d
      else
        out = KnapcodeOilField.Location.getInvalid()
      end
      neighbors:set(3, out)
    end
    return {
      base = function (out)
        return {
          out.Knapcode.FactorioTools.OilField.SquareGrid
        }
      end,
      GetNeighbors = GetNeighbors,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
