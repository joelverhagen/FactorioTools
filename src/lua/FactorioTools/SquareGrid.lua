-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeFactorioTools
local KnapcodeOilField
local ArrayGridEntity
local DictInt32Location
System.import(function (out)
  KnapcodeFactorioTools = Knapcode.FactorioTools
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ArrayGridEntity = System.Array(KnapcodeOilField.GridEntity)
  DictInt32Location = System.Dictionary(System.Int32, KnapcodeOilField.Location)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("SquareGrid", function (namespace)
    local get, GetId, getEntityIdToLocation, getEntityLocations, IsEmpty, AddEntity, RemoveEntity, IsEntityType, 
    IsInBounds, GetAdjacent, GetIndex, ToString, ToString1, __ctor1__, __ctor2__
    namespace.class("Empty", function (namespace)
      local Instance, getLabel, class, static, __ctor__
      static = function (this)
        Instance = class(0)
        this.Instance = Instance
      end
      __ctor__ = function (this, id)
        System.base(this).__ctor__(this, id)
      end
      getLabel = function (this)
        return "." --[[SquareGrid.EmptyLabel]]
      end
      class = {
        base = function (out)
          return {
            out.Knapcode.FactorioTools.OilField.GridEntity
          }
        end,
        getLabel = getLabel,
        static = static,
        __ctor__ = __ctor__
      }
      return class
    end)
    __ctor1__ = function (this, existing, clone)
      this.Width = existing.Width
      this.Height = existing.Height
      this.Middle = existing.Middle

      if clone then
        this._entityIdToLocation = DictInt32Location(existing._entityIdToLocation)
        this._entityLocations = System.new(KnapcodeOilField.LocationIntSet, 3, existing.Width, existing._entityLocations:getCount())

        this._entityLocations:UnionWith1(existing._entityLocations)

        this._grid = System.cast(ArrayGridEntity, existing._grid:Clone())
        this._nextId = existing._nextId
      else
        this._entityIdToLocation = existing._entityIdToLocation
        this._entityLocations = existing._entityLocations
        this._grid = existing._grid
        this._nextId = existing._nextId
      end
    end
    __ctor2__ = function (this, width, height)
      this.Width = width
      this.Height = height
      this.Middle = KnapcodeOilField.Location(System.div(this.Width, 2), System.div(this.Height, 2))
      this._entityIdToLocation = DictInt32Location()
      this._entityLocations = System.new(KnapcodeOilField.LocationIntSet, 2, width)

      this._grid = ArrayGridEntity(width * height)
      this._nextId = 1
    end
    get = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.SquareGrid.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this.Width + location.X
      end
      return this._grid:get(default)
    end
    GetId = function (this)
      local id = this._nextId
      this._nextId = this._nextId + 1
      return id
    end
    getEntityIdToLocation = function (this)
      return this._entityIdToLocation
    end
    getEntityLocations = function (this)
      return this._entityLocations
    end
    IsEmpty = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.SquareGrid.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this.Width + location.X
      end
      return this._grid:get(default) == nil
    end
    AddEntity = function (this, location, entity)
      -- inline Knapcode.FactorioTools.OilField.SquareGrid.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this.Width + location.X
      end
      local index = default

      if this._grid:get(index) ~= nil then
        System.throw(KnapcodeFactorioTools.FactorioToolsException("There is already an entity at " .. System.toString(location) .. "."))
      end

      this._grid:set(index, entity)
      this._entityLocations:Add(location)
      this._entityIdToLocation:AddKeyValue(entity.Id, location)
    end
    RemoveEntity = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.SquareGrid.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this.Width + location.X
      end
      local index = default
      local entity = this._grid:get(index)
      if entity ~= nil then
        this._grid:set(index, nil)
        this._entityLocations:Remove(location)
        this._entityIdToLocation:RemoveKey(entity.Id)
        entity:Unlink()
      end
    end
    IsEntityType = function (this, location, T)
      -- inline Knapcode.FactorioTools.OilField.SquareGrid.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this.Width + location.X
      end
      return System.is(this._grid:get(default), T)
    end
    IsInBounds = function (this, location)
      return location.X >= 0 and location.X < this.Width and location.Y >= 0 and location.Y < this.Height
    end
    GetAdjacent = function (this, adjacent, location)
      local a = location:Translate(1, 0)
      local default
      if IsInBounds(this, a) then
        default = a
      else
        default = KnapcodeOilField.Location.getInvalid()
      end
      adjacent:set(0, default)

      local b = location:Translate(0, - 1)
      local extern
      if IsInBounds(this, b) then
        extern = b
      else
        extern = KnapcodeOilField.Location.getInvalid()
      end
      adjacent:set(1, extern)

      local c = location:Translate(- 1, 0)
      local ref
      if IsInBounds(this, c) then
        ref = c
      else
        ref = KnapcodeOilField.Location.getInvalid()
      end
      adjacent:set(2, ref)

      local d = location:Translate(0, 1)
      local out
      if IsInBounds(this, d) then
        out = d
      else
        out = KnapcodeOilField.Location.getInvalid()
      end
      adjacent:set(3, out)
    end
    GetIndex = function (this, location)
      return location.Y * this.Width + location.X
    end
    ToString = function (this)
      local builder = System.StringBuilder()
      ToString1(this, builder, 1)
      return builder:ToString()
    end
    ToString1 = function (this, builder, spacing)
      local maxLabelLength = KnapcodeFactorioTools.CollectionExtensions.Max(this._entityLocations:EnumerateItems(), function (x)
        return #this:get(x):getLabel()
      end, KnapcodeOilField.Location, System.Int32) + spacing

      for y = 0, this.Height - 1 do
        for x = 0, this.Width - 1 do
          local location = KnapcodeOilField.Location(x, y)
          local entity = this._grid:get(y * this.Width + x)
          if entity ~= nil then
            builder:Append(entity:getLabel():PadRight(maxLabelLength))
          else
            builder:Append(("." --[[SquareGrid.EmptyLabel]]):PadRight(maxLabelLength))
          end
        end

        builder:AppendLine()
      end
    end
    return {
      _nextId = 0,
      Width = 0,
      Height = 0,
      get = get,
      GetId = GetId,
      getEntityIdToLocation = getEntityIdToLocation,
      getEntityLocations = getEntityLocations,
      IsEmpty = IsEmpty,
      AddEntity = AddEntity,
      RemoveEntity = RemoveEntity,
      IsEntityType = IsEntityType,
      IsInBounds = IsInBounds,
      GetAdjacent = GetAdjacent,
      ToString = ToString,
      ToString1 = ToString1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
