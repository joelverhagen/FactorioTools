-- Generated by CSharp.lua Compiler
local System = System
local ArrayInt32 = System.Array(System.Int32)
local Comparer_1Int32 = System.Comparer_1(System.Int32)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("DictionaryTableArray_1", function (namespace)
    return function (T)
      local get, set, getCount, Add, AddCollection, AddRange, Clear, Contains, 
      EnumerateItems, Remove, RemoveAt, RemoveRange, Reverse, Sort, SortRange, class, 
      __ctor1__, __ctor2__
      local ArrayT = System.Array(T)
      local DictInt32T = System.Dictionary(System.Int32, T)
      local EqualityComparerT = System.EqualityComparer(T)
      __ctor1__ = function (this)
        this._dictionary = DictInt32T()
      end
      __ctor2__ = function (this, capacity)
        this._dictionary = DictInt32T(capacity)
      end
      get = function (this, index)
        if index >= this._dictionary:getCount() then
          System.throw(System.IndexOutOfRangeException())
        end

        return this._dictionary:get(index)
      end
      set = function (this, index, value)
        if index >= this._dictionary:getCount() then
          System.throw(System.IndexOutOfRangeException())
        end

        this._dictionary:set(index, value)
      end
      getCount = function (this)
        return this._dictionary:getCount()
      end
      Add = function (this, item)
        this._dictionary:AddKeyValue(this._dictionary:getCount(), item)
      end
      AddCollection = function (this, collection)
        for _, item in System.each(collection) do
          this._dictionary:AddKeyValue(this._dictionary:getCount(), item)
        end
      end
      AddRange = function (this, collection)
        local other = System.cast(class, collection)
        for i = 0, getCount(other) - 1 do
          this._dictionary:AddKeyValue(this._dictionary:getCount(), other:get(i))
        end
      end
      Clear = function (this)
        this._dictionary:Clear()
      end
      Contains = function (this, item)
        local comparer = EqualityComparerT.getDefault()
        for _, value in System.each(this._dictionary:getValues()) do
          if comparer:EqualsOf(item, value) then
            return true
          end
        end

        return false
      end
      EnumerateItems = function (this)
        return this._dictionary:getValues()
      end
      Remove = function (this, item)
        local comparer = EqualityComparerT.getDefault()
        local index = - 1
        for _, default in System.each(this._dictionary) do
          local key, value = default:Deconstruct()
          if comparer:EqualsOf(item, value) then
            index = key
            break
          end
        end

        if index == - 1 then
          return false
        end

        RemoveAt(this, index)
        return true
      end
      RemoveAt = function (this, index)
        RemoveRange(this, index, 1)
      end
      RemoveRange = function (this, index, count)
        local originalCount = this._dictionary:getCount()
        if index + count > originalCount then
          System.throw(System.IndexOutOfRangeException())
        end

        local startIndex = index + count
        for i = startIndex, originalCount - 1 do
          this._dictionary:set(i - count, this._dictionary:get(i))
          this._dictionary:RemoveKey(i)
        end

        for i = originalCount - count, startIndex - 1 do
          this._dictionary:RemoveKey(i)
        end
      end
      Reverse = function (this)
        local count = this._dictionary:getCount()
        for i = 0, System.div(count, 2) - 1 do
          local temp = this._dictionary:get(i)
          local otherIndex = count - 1 - i
          this._dictionary:set(i, this._dictionary:get(otherIndex))
          this._dictionary:set(otherIndex, temp)
        end
      end
      Sort = function (this, comparison)
        local keys = ArrayInt32(this._dictionary:getCount())
        local values = ArrayT(this._dictionary:getCount())
        for i = 0, #keys - 1 do
          keys:set(i, i)
          values:set(i, this._dictionary:get(i))
        end

        System.Array.Sort(keys, function (a, b)
          return comparison(this:get(a), this:get(b), T)
        end)

        for i = 0, #keys - 1 do
          this._dictionary:set(i, values:get(keys:get(i)))
        end
      end
      SortRange = function (this, index, count, comparer)
        local keys = ArrayInt32(this._dictionary:getCount())
        local values = ArrayT(this._dictionary:getCount())
        for i = 0, #keys - 1 do
          keys:set(i, i)
          values:set(i, this._dictionary:get(i))
        end

        local keyComparer = Comparer_1Int32.Create(function (a, b)
          return comparer:Compare(this:get(a), this:get(b))
        end)
        System.Array.Sort(keys, index, count, keyComparer)

        for i = 0, #keys - 1 do
          this._dictionary:set(i, values:get(keys:get(i)))
        end
      end
      class = {
        base = function (out)
          return {
            out.Knapcode.FactorioTools.OilField.ITableArray_1(T)
          }
        end,
        get = get,
        set = set,
        getCount = getCount,
        Add = Add,
        AddCollection = AddCollection,
        AddRange = AddRange,
        Clear = Clear,
        Contains = Contains,
        EnumerateItems = EnumerateItems,
        Remove = Remove,
        RemoveAt = RemoveAt,
        RemoveRange = RemoveRange,
        Reverse = Reverse,
        Sort = Sort,
        SortRange = SortRange,
        __ctor__ = {
          __ctor1__,
          __ctor2__
        }
      }
      return class
    end
  end)
end)
