-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeFactorioTools
local KnapcodeFactorioToolsData
local KnapcodeOilField
local ArrayIcon
local ArrayEntity
System.import(function (out)
  KnapcodeFactorioTools = Knapcode.FactorioTools
  KnapcodeFactorioToolsData = Knapcode.FactorioTools.Data
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ArrayIcon = System.Array(KnapcodeFactorioToolsData.Icon)
  ArrayEntity = System.Array(KnapcodeFactorioToolsData.Entity)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("PlannerResult", function (namespace)
    local __members__, __ctor__
    __ctor__ = function (this, Context, Summary)
      this.Context = Context
      this.Summary = Summary
    end
    __members__ = function ()
      return "PlannerResult", "Context", "Summary"
    end
    return {
      base = function (out)
        return {
          System.RecordType,
          System.IEquatable_1(out.Knapcode.FactorioTools.OilField.PlannerResult)
        }
      end,
      __members__ = __members__,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("Planner", function (namespace)
    local ExecuteSample, Execute, Execute1, Execute2, GetElectricPolesAvoid
    ExecuteSample = function ()
      local options = KnapcodeOilField.OilFieldOptions.getForMediumElectricPole()

      options.PipeStrategies = KnapcodeFactorioTools.CollectionExtensions.ToList(KnapcodeOilField.OilFieldOptions.AllPipeStrategies, System.Int32)
      options.BeaconStrategies = KnapcodeFactorioTools.CollectionExtensions.ToList(KnapcodeOilField.OilFieldOptions.AllBeaconStrategies, System.Int32)
      options.ValidateSolution = true

      local default = KnapcodeFactorioToolsData.Blueprint()
      local extern = KnapcodeFactorioToolsData.Entity()
      extern.EntityNumber = 1
      extern.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      local ref = KnapcodeFactorioToolsData.Position()
      ref.X = - 3
      ref.Y = - 5
      extern.Position = ref
      local ref = KnapcodeFactorioToolsData.Entity()
      ref.EntityNumber = 2
      ref.Direction = 4 --[[Direction.Down]]
      ref.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      local out = KnapcodeFactorioToolsData.Position()
      out.X = 4
      out.Y = 5
      ref.Position = out
      local out = KnapcodeFactorioToolsData.Entity()
      out.EntityNumber = 3
      out.Direction = 2 --[[Direction.Right]]
      out.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      local try = KnapcodeFactorioToolsData.Position()
      try.X = 12
      try.Y = - 2
      out.Position = try
      local try = KnapcodeFactorioToolsData.Entity()
      try.EntityNumber = 4
      try.Direction = 4 --[[Direction.Down]]
      try.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      local case = KnapcodeFactorioToolsData.Position()
      case.X = - 8
      case.Y = 7
      try.Position = case
      default.Entities = ArrayEntity(4, { extern, ref, out, try })
      local case = KnapcodeFactorioToolsData.Icon()
      case.Index = 1
      local void = KnapcodeFactorioToolsData.SignalID()
      void.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      void.Type = "item" --[[Vanilla.Item]]
      case.Signal = void
      default.Icons = ArrayIcon(1, { case })
      default.Item = "blueprint" --[[Vanilla.Blueprint]]
      default.Version = 0
      local inputBlueprint = default

      return Execute(options, inputBlueprint)
    end
    Execute = function (options, inputBlueprint)
      return Execute1(options, inputBlueprint, System.Array.Empty(KnapcodeOilField.AvoidLocation))
    end
    Execute1 = function (options, inputBlueprint, avoid)
      return Execute2(options, inputBlueprint, avoid, KnapcodeOilField.EmptyLocationSet.Instance, 0 --[[EletricPolesMode.AddLast]])
    end
    Execute2 = function (options, blueprint, avoid, electricPolesAvoid, electricPolesMode)
      local context = KnapcodeOilField.InitializeContext.Execute(options, blueprint, avoid)
      local initialPumpjackCount = context.CenterToTerminals:getCount()
      local addElectricPolesFirst = electricPolesMode ~= 0 --[[EletricPolesMode.AddLast]]

      if context.CenterToTerminals:getCount() == 0 then
        System.throw(System.new(KnapcodeFactorioTools.FactorioToolsException, 2, "The must be at least one pumpjack in the blueprint.", true))
      end

      local poles
      if addElectricPolesFirst then
        if electricPolesMode == 2 --[[EletricPolesMode.AddFirstAndAvoidAllTerminals]] then
          electricPolesAvoid = GetElectricPolesAvoid(context)
        end

        poles = KnapcodeOilField.AddElectricPoles.Execute(context, electricPolesAvoid, false)

        if poles == nil then
          if electricPolesMode == 2 --[[EletricPolesMode.AddFirstAndAvoidAllTerminals]] then
            System.throw(System.new(KnapcodeFactorioTools.FactorioToolsException, 2, "No valid placement for the electric poles could be found, while adding electric poles first. Try removing some pumpjacks or using a different electric pole." --[["No valid placement for the electric poles could be found, while adding electric poles first. " +
                        "Try removing some pumpjacks or using a different electric pole."]], true))
          end

          return Execute2(options, blueprint, avoid, KnapcodeOilField.EmptyLocationSet.Instance, 2 --[[EletricPolesMode.AddFirstAndAvoidAllTerminals]])
        else
          -- remove terminals overlapping with the added poles
          for _, terminals in System.each(context.CenterToTerminals:getValues()) do
            local continue
            repeat
              for i = 0, #terminals - 1 do
                local continue
                repeat
                  local terminal = terminals:get(i)
                  if context.Grid:IsEmpty(terminal.Terminal) then
                    continue = true
                    break
                  end

                  terminals:RemoveAt(i)
                  context.LocationToTerminals:get(terminal.Terminal):Remove(terminal)
                  i = i - 1
                  continue = true
                until 1
                if not continue then
                  break
                end
              end
              continue = true
            until 1
            if not continue then
              break
            end
          end
        end
      end

      local selectedPlans, alternatePlans, unusedPlans = KnapcodeOilField.AddPipes.Execute(context, addElectricPolesFirst):Deconstruct()

      -- Visualizer.Show(context.Grid, Array.Empty<DelaunatorSharp.IPoint>(), Array.Empty<DelaunatorSharp.IEdge>());

      if options.AddElectricPoles then
        if not addElectricPolesFirst or context.Options.AddBeacons then
          poles = KnapcodeOilField.AddElectricPoles.Execute(context, KnapcodeOilField.EmptyLocationSet.Instance, addElectricPolesFirst)
          if poles == nil then
            if addElectricPolesFirst then
              -- Visualizer.Show(context.Grid, Array.Empty<DelaunatorSharp.IPoint>(), Array.Empty<DelaunatorSharp.IEdge>());
              System.throw(System.new(KnapcodeFactorioTools.FactorioToolsException, 2, "No valid placement for the electric poles could be found, after adding electric poles first. Try removing some pumpjacks or using a different electric pole." --[["No valid placement for the electric poles could be found, after adding electric poles first. " +
                            "Try removing some pumpjacks or using a different electric pole."]], true))
            else
              electricPolesAvoid = GetElectricPolesAvoid(context)
              return Execute2(options, blueprint, avoid, electricPolesAvoid, 1 --[[EletricPolesMode.AddFirstAndAvoidSpecificTerminals]])
            end
          end
        end

        KnapcodeOilField.Validate.AllEntitiesHavePower(context)
      end

      local missingPumpjacks = initialPumpjackCount - context.CenterToTerminals:getCount()
      if missingPumpjacks > 0 then
        System.throw(KnapcodeFactorioTools.FactorioToolsException("The initial number of pumpjacks does not match the final pumpjack count."))
      end

      for _, default in System.each(context.CenterToTerminals:EnumeratePairs()) do
        local center, terminals = default:Deconstruct()
        local centerEntity = System.as(context.Grid:get(center), KnapcodeOilField.PumpjackCenter)
        if centerEntity == nil then
          System.throw(KnapcodeFactorioTools.FactorioToolsException("A pumpjack center entity was not at the expected location."))
        end

        centerEntity.Direction = terminals:get(0).Direction
      end

      local rotatedPumpjacks = 0
      for _, extern in System.each(context.CenterToOriginalDirection:EnumeratePairs()) do
        local location, originalDirection = extern:Deconstruct()
        local finalDirection = KnapcodeFactorioTools.CollectionExtensions.Single(context.CenterToTerminals:get(location), KnapcodeOilField.TerminalLocation).Direction
        if originalDirection ~= finalDirection then
          rotatedPumpjacks = rotatedPumpjacks + 1
        end
      end

      local planSummary = KnapcodeOilField.OilFieldPlanSummary(missingPumpjacks, rotatedPumpjacks, selectedPlans, alternatePlans, unusedPlans)

      return KnapcodeOilField.PlannerResult(context, planSummary)
    end
    GetElectricPolesAvoid = function (context)
      local electricPolesAvoid = context:GetLocationSet2(true)
      for _, terminals in System.each(context.CenterToTerminals:getValues()) do
        for i = 0, #terminals - 1 do
          electricPolesAvoid:Add(terminals:get(i).Terminal)
        end
      end

      return electricPolesAvoid
    end
    return {
      ExecuteSample = ExecuteSample,
      Execute = Execute,
      Execute1 = Execute1
    }
  end)
end)
