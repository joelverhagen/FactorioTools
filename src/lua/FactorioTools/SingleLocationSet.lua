-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeOilField
local ArrayLocation
System.import(function (out)
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ArrayLocation = System.Array(KnapcodeOilField.Location)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("SingleLocationSet", function (namespace)
    local getCount, Add, Clear, Contains, CopyTo, EnumerateItems, ExceptWith, Overlaps, 
    Remove, SetEquals, UnionWith, UnionWith1, __ctor1__, __ctor2__
    __ctor1__ = function (this)
      this._x = - 1
      this._y = - 1
      this._hasItem = false
    end
    __ctor2__ = function (this, location)
      this._x = location.X
      this._y = location.Y
      this._hasItem = true
    end
    getCount = function (this)
      return this._hasItem and 1 or 0
    end
    Add = function (this, location)
      if not this._hasItem then
        this._x = location.X
        this._y = location.Y
        this._hasItem = true
        return true
      elseif this._x == location.X and this._y == location.Y then
        return false
      else
        System.throw(System.NotSupportedException())
      end
    end
    Clear = function (this)
      this._hasItem = false
    end
    Contains = function (this, location)
      return this._hasItem and location.X == this._x and location.Y == this._y
    end
    CopyTo = function (this, array)
      if not this._hasItem then
        return
      end

      if array:getLength() == 0 then
        System.throw(System.ArgumentException("The array is not big enough.", "array" --[[nameof(array)]]))
      end

      array:set(0, KnapcodeOilField.Location(this._x, this._y))
    end
    EnumerateItems = function (this)
      local default
      if this._hasItem then
        default = ArrayLocation(1, {
          KnapcodeOilField.Location(this._x, this._y)
        })
      else
        default = System.Array.Empty(KnapcodeOilField.Location)
      end
      return default
    end
    ExceptWith = function (this, other)
      System.throw(System.NotSupportedException())
    end
    Overlaps = function (this, other)
      System.throw(System.NotSupportedException())
    end
    Remove = function (this, location)
      if not this._hasItem then
        return false
      elseif this._x == location.X and this._y == location.Y then
        this._x = - 1
        this._y = - 1
        this._hasItem = false
        return true
      end

      return false
    end
    SetEquals = function (this, other)
      if other:getCount() ~= 1 then
        return false
      end

      return other:Contains(KnapcodeOilField.Location(this._x, this._y))
    end
    UnionWith = function (this, other)
      System.throw(System.NotSupportedException())
    end
    UnionWith1 = function (this, other)
      System.throw(System.NotSupportedException())
    end
    return {
      base = function (out)
        return {
          out.Knapcode.FactorioTools.OilField.ILocationSet
        }
      end,
      _x = 0,
      _y = 0,
      _hasItem = false,
      getCount = getCount,
      Add = Add,
      Clear = Clear,
      Contains = Contains,
      CopyTo = CopyTo,
      EnumerateItems = EnumerateItems,
      ExceptWith = ExceptWith,
      Overlaps = Overlaps,
      Remove = Remove,
      SetEquals = SetEquals,
      UnionWith = UnionWith,
      UnionWith1 = UnionWith1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
