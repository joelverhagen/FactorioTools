-- Generated by CSharp.lua Compiler
local System = System
local ArrayChar = System.Array(System.Char)
local ArrayInt32 = System.Array(System.Int32)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("CustomCountedBitArray", function (namespace)
    local get, set, Set, All, Any, SetAll, And, Not, 
    EqualsObj, Equals, GetHashCode, GetInt, Or, CountTrue, ClearUnusedBits, ToString, 
    class, __ctor1__, __ctor2__
    __ctor1__ = function (this, bits)
      this.Count = bits.Count
      this._array = ArrayInt32(#bits._array)
      System.Array.Copy(bits._array, this._array, #bits._array)
      this.TrueCount = bits.TrueCount
    end
    __ctor2__ = function (this, length)
      this.Count = length
      local intLength = System.div(length, 32)
      if System.mod(length, 32) ~= 0 then
        intLength = intLength + 1
      end
      this._array = ArrayInt32(intLength)
    end
    get = function (this, index)
      if index >= this.Count then
        System.throw(System.IndexOutOfRangeException())
      end

      local intIndex = System.div(index, 32)
      local bitIndex = System.mod(index, 32)
      return (System.band(this._array:get(intIndex), (System.sl(1, bitIndex)))) ~= 0
    end
    set = function (this, index, value)
      Set(this, index, value)
    end
    Set = function (this, index, value)
      if index >= this.Count then
        System.throw(System.IndexOutOfRangeException())
      end

      local intIndex = System.div(index, 32)
      local bitIndex = System.mod(index, 32)
      local currentInt = this._array:get(intIndex)
      local mask = System.sl(1, bitIndex)
      local current = (System.band(currentInt, mask)) ~= 0
      if current ~= value then
        if value then
          this._array:set(intIndex, System.bor(currentInt, mask))
          this.TrueCount = this.TrueCount + 1
        else
          this._array:set(intIndex, System.band(currentInt, System.bnot(mask)))
          this.TrueCount = this.TrueCount - 1
        end
      end
      return current
    end
    All = function (this, value)
      local default
      if value then
        default = this.TrueCount == this.Count
      else
        default = this.TrueCount == 0
      end
      return default
    end
    Any = function (this, value)
      local default
      if value then
        default = this.TrueCount > 0
      else
        default = this.TrueCount < this.Count
      end
      return default
    end
    SetAll = function (this, value)
      System.Array.Fill(this._array, value and - 1 or 0)

      if value then
        ClearUnusedBits(this)
      end

      this.TrueCount = value and this.Count or 0
    end
    And = function (this, value)
      if value.Count ~= this.Count then
        System.throw(System.ArgumentException("The two bit arrays must have the same number of elements."))
      end

      for i = 0, #this._array - 1 do
        this._array:set(i, System.band(this._array:get(i), value._array:get(i)))
      end

      this.TrueCount = CountTrue(this)
      return this
    end
    Not = function (this)
      for i = 0, #this._array - 1 do
        this._array:set(i, System.bnot(this._array:get(i)))
      end

      ClearUnusedBits(this)

      this.TrueCount = this.Count - this.TrueCount
      return this
    end
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
    end
    Equals = function (this, other)
      if other == nil then
        return false
      end

      if System.Object.ReferenceEquals(this, other) then
        return true
      end

      if this.Count ~= other.Count then
        return false
      end

      for i = 0, #this._array - 1 do
        if this._array:get(i) ~= other._array:get(i) then
          return false
        end
      end

      return true
    end
    GetHashCode = function (this)
      local hashCode = 23

      for i = 0, #this._array - 1 do
        hashCode = hashCode * 31 + this._array:get(i)
      end

      return hashCode
    end
    GetInt = function (this, index)
      if index >= #this._array then
        System.throw(System.IndexOutOfRangeException())
      end

      return this._array:get(index)
    end
    Or = function (this, value)
      if value.Count ~= this.Count then
        System.throw(System.ArgumentException("The two bit arrays must have the same number of elements."))
      end

      for i = 0, #this._array - 1 do
        this._array:set(i, System.bor(this._array:get(i), value._array:get(i)))
      end

      this.TrueCount = CountTrue(this)
      return this
    end
    CountTrue = function (this)
      local count = 0

      for i = 0, this.Count - 1 do
        if this:get(i) then
          count = count + 1
        end
      end

      return count
    end
    ClearUnusedBits = function (this)
      if System.mod(this.Count, 32) == 0 then
        return
      end

      local lastIntIndex = #this._array - 1
      local currentInt = this._array:get(lastIntIndex)
      if currentInt == 0 then
        return
      end

      for i = System.mod(this.Count, 32), 31 do
        currentInt = System.band(currentInt, System.bnot((System.sl(1, i))))
      end

      this._array:set(lastIntIndex, currentInt)
    end
    ToString = function (this)
      local chars = ArrayChar(this.Count)
      for i = 0, this.Count - 1 do
        chars:set(i, this:get(i) and 49 --[['1']] or 48 --[['0']])
      end
      return System.String(chars)
    end
    class = {
      Count = 0,
      get = get,
      set = set,
      Set = Set,
      TrueCount = 0,
      All = All,
      Any = Any,
      SetAll = SetAll,
      And = And,
      Not = Not,
      EqualsObj = EqualsObj,
      Equals = Equals,
      GetHashCode = GetHashCode,
      GetInt = GetInt,
      Or = Or,
      ToString = ToString,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
