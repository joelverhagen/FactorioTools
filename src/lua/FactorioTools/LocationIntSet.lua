-- Generated by CSharp.lua Compiler
local System = System
local HashSetInt32 = System.HashSet(System.Int32)
local KnapcodeOilField
local ListLocation
System.import(function (out)
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ListLocation = System.List(KnapcodeOilField.Location)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("LocationIntSet", function (namespace)
    local getCount, Add, Remove, Contains, UnionWith, UnionWith1, ExceptWith, SetEquals, 
    Overlaps, Clear, CopyTo, EnumerateItems, ValidateSameDimensions, GetIndex, class, __ctor1__, 
    __ctor2__, __ctor3__
    __ctor1__ = function (this, existing)
      this._width = existing._width
      this._set = HashSetInt32(existing._set)
    end
    __ctor2__ = function (this, width)
      this._width = width
      this._set = HashSetInt32()
    end
    __ctor3__ = function (this, width, capacity)
      this._width = width
      this._set = HashSetInt32(capacity)
    end
    getCount = function (this)
      return this._set:getCount()
    end
    Add = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this._width + location.X
      end
      return this._set:Add(default)
    end
    Remove = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this._width + location.X
      end
      return this._set:Remove(default)
    end
    Contains = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this._width + location.X
      end
      return this._set:Contains(default)
    end
    UnionWith = function (this, other)
      for _, location in System.each(other) do
        -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
        local default
        do
          local location = location
          default = location.Y * this._width + location.X
        end
        this._set:Add(default)
      end
    end
    UnionWith1 = function (this, other)
      if other:getCount() == 0 then
        return
      elseif other:getCount() == 1 then
        for _, item in System.each(other:EnumerateItems()) do
          -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
          local default
          do
            local location = item
            default = location.Y * this._width + location.X
          end
          this._set:Add(default)
        end
      else
        local otherSet = ValidateSameDimensions(this, other)
        this._set:UnionWith(otherSet._set)
      end
    end
    ExceptWith = function (this, other)
      if other:getCount() == 0 then
        return
      else
        for _, item in System.each(other:EnumerateItems()) do
          -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
          local default
          do
            local location = item
            default = location.Y * this._width + location.X
          end
          this._set:Remove(default)
        end
      end
    end
    SetEquals = function (this, other)
      local otherSet = ValidateSameDimensions(this, other)
      return this._set:SetEquals(otherSet._set)
    end
    Overlaps = function (this, other)
      if getCount(this) == 0 then
        return false
      end

      for _, location in System.each(other) do
        -- inline Knapcode.FactorioTools.OilField.LocationIntSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
        local default
        do
          local location = location
          default = location.Y * this._width + location.X
        end
        if this._set:Contains(default) then
          return true
        end
      end

      return false
    end
    Clear = function (this)
      this._set:Clear()
    end
    CopyTo = function (this, array)
      local index = 0
      for _, location in System.each(EnumerateItems(this)) do
        array:set(index, location)
        index = index + 1
      end
    end
    EnumerateItems = function (this)
      local items = ListLocation(this._set:getCount())
      for _, item in System.each(this._set) do
        items:Add(KnapcodeOilField.Location(System.mod(item, this._width), System.div(item, this._width)))
      end
      return items
    end
    ValidateSameDimensions = function (this, other)
      local otherSet = System.cast(class, other)
      if otherSet._width ~= this._width then
        System.throw(System.ArgumentException("The location set dimensions must be the same."))
      end

      return otherSet
    end
    GetIndex = function (this, location)
      return location.Y * this._width + location.X
    end
    class = {
      base = function (out)
        return {
          out.Knapcode.FactorioTools.OilField.ILocationSet
        }
      end,
      _width = 0,
      getCount = getCount,
      Add = Add,
      Remove = Remove,
      Contains = Contains,
      UnionWith = UnionWith,
      UnionWith1 = UnionWith1,
      ExceptWith = ExceptWith,
      SetEquals = SetEquals,
      Overlaps = Overlaps,
      Clear = Clear,
      CopyTo = CopyTo,
      EnumerateItems = EnumerateItems,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      }
    }
    return class
  end)
end)
