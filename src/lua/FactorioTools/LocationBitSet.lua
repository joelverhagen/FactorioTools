-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeOilField
System.import(function (out)
  KnapcodeOilField = Knapcode.FactorioTools.OilField
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("LocationBitSet", function (namespace)
    local getCount, Add, Clear, Contains, CopyTo, EnumerateItems, ExceptWith, Overlaps, 
    Remove, SetEquals, UnionWith, UnionWith1, ValidateSameDimensions, GetIndex, class, __ctor1__, 
    __ctor2__
    __ctor1__ = function (this, existing)
      this._width = existing._width
      this._set = KnapcodeOilField.CustomCountedBitArray(existing._set)
    end
    __ctor2__ = function (this, width, height)
      this._width = width
      this._set = System.new(KnapcodeOilField.CustomCountedBitArray, 2, width * height)
    end
    getCount = function (this)
      return this._set.TrueCount
    end
    Add = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.LocationBitSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this._width + location.X
      end
      return not this._set:Set(default, true)
    end
    Clear = function (this)
      this._set:SetAll(false)
    end
    Contains = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.LocationBitSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this._width + location.X
      end
      return this._set:get(default)
    end
    CopyTo = function (this, array)
      System.throw(System.NotSupportedException())
    end
    EnumerateItems = function (this)
      System.throw(System.NotSupportedException())
    end
    ExceptWith = function (this, other)
      local otherSet = KnapcodeOilField.CustomCountedBitArray(ValidateSameDimensions(this, other)._set)
      otherSet:Not()
      this._set:And(otherSet)
    end
    Overlaps = function (this, other)
      for _, item in System.each(other) do
        -- inline Knapcode.FactorioTools.OilField.LocationBitSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
        local default
        do
          local location = item
          default = location.Y * this._width + location.X
        end
        if this._set:get(default) then
          return true
        end
      end

      return false
    end
    Remove = function (this, location)
      -- inline Knapcode.FactorioTools.OilField.LocationBitSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
      local default
      do
        local location = location
        default = location.Y * this._width + location.X
      end
      return this._set:Set(default, false)
    end
    SetEquals = function (this, other)
      local otherSet = ValidateSameDimensions(this, other)
      return this._set:EqualsObj(otherSet)
    end
    UnionWith = function (this, other)
      for _, item in System.each(other) do
        -- inline Knapcode.FactorioTools.OilField.LocationBitSet.GetIndex(Knapcode.FactorioTools.OilField.Location)
        local default
        do
          local location = item
          default = location.Y * this._width + location.X
        end
        this._set:Set(default, true)
      end
    end
    UnionWith1 = function (this, other)
      local otherSet = ValidateSameDimensions(this, other)
      this._set:Or(otherSet._set)
    end
    ValidateSameDimensions = function (this, other)
      local otherSet = System.cast(class, other)
      if otherSet._width ~= this._width then
        System.throw(System.ArgumentException("The location set dimensions must be the same."))
      end

      return otherSet
    end
    GetIndex = function (this, location)
      return location.Y * this._width + location.X
    end
    class = {
      base = function (out)
        return {
          out.Knapcode.FactorioTools.OilField.ILocationSet
        }
      end,
      _width = 0,
      getCount = getCount,
      Add = Add,
      Clear = Clear,
      Contains = Contains,
      CopyTo = CopyTo,
      EnumerateItems = EnumerateItems,
      ExceptWith = ExceptWith,
      Overlaps = Overlaps,
      Remove = Remove,
      SetEquals = SetEquals,
      UnionWith = UnionWith,
      UnionWith1 = UnionWith1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
