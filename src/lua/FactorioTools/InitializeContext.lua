-- Generated by CSharp.lua Compiler
local System = System
local ArrayInt32 = System.Array(System.Int32)
local KnapcodeFactorioTools
local KnapcodeFactorioToolsData
local KnapcodeOilField
local ArrayIcon
local ListTuple
local ListEntity
local ListLocation
local SpanLocation
local ArrayLocation
local ListTerminalLocation
local LocationIntDictionary_1Int32
local LocationIntDictionary_1ListTerminalLocation
System.import(function (out)
  KnapcodeFactorioTools = Knapcode.FactorioTools
  KnapcodeFactorioToolsData = Knapcode.FactorioTools.Data
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ArrayIcon = System.Array(KnapcodeFactorioToolsData.Icon)
  ListTuple = System.List(System.Tuple)
  ListEntity = System.List(KnapcodeFactorioToolsData.Entity)
  ListLocation = System.List(KnapcodeOilField.Location)
  SpanLocation = System.Span(KnapcodeOilField.Location)
  ArrayLocation = System.Array(KnapcodeOilField.Location)
  ListTerminalLocation = System.List(KnapcodeOilField.TerminalLocation)
  LocationIntDictionary_1Int32 = KnapcodeOilField.LocationIntDictionary_1(System.Int32)
  LocationIntDictionary_1ListTerminalLocation = KnapcodeOilField.LocationIntDictionary_1(ListTerminalLocation)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("InitializeContext", function (namespace)
    local Execute, GetEmpty, Execute1, PopulateCenters, PopulateCenterToOriginalDirection, GetLocationToAdjacentCount, TranslateLocations, InitializeGrid
    Execute = function (options, blueprint, avoid)
      -- Translate the blueprint by the minimum X and Y. Leave three spaces on both lesser (left for X, top for Y) sides to cover:
      --   - The side of the pumpjack. It is a 3x3 entity and the position of the entity is the center.
      --   - A spot for a pipe, if needed.
      --   - A spot for an electric pole, if needed.
      local marginX = 2 --[[1 + 1]] + options.ElectricPoleWidth
      local marginY = 2 --[[1 + 1]] + options.ElectricPoleHeight

      if options.AddBeacons then
        marginX = marginX + ((options.BeaconSupplyWidth + (System.div(options.BeaconWidth, 2))))
        marginY = marginY + ((options.BeaconSupplyHeight + (System.div(options.BeaconHeight, 2))))
      end

      return Execute1(options, blueprint, avoid, marginX, marginY)
    end
    GetEmpty = function (options, width, height)
      local default = KnapcodeFactorioToolsData.Blueprint()
      default.Entities = System.Array.Empty(KnapcodeFactorioToolsData.Entity)
      local extern = KnapcodeFactorioToolsData.Icon()
      extern.Index = 1
      local ref = KnapcodeFactorioToolsData.SignalID()
      ref.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      ref.Type = "item" --[[Vanilla.Item]]
      extern.Signal = ref
      default.Icons = ArrayIcon(1, { extern })
      default.Item = "blueprint" --[[Vanilla.Blueprint]]
      default.Version = 1
      local blueprint = default

      return Execute1(options, blueprint, System.Array.Empty(KnapcodeOilField.AvoidLocation), width, height)
    end
    Execute1 = function (options, blueprint, avoid, marginX, marginY)
      local centerAndOriginalDirections, avoidLocations, deltaX, deltaY = TranslateLocations(blueprint, avoid, marginX, marginY):Deconstruct()

      local grid = InitializeGrid(centerAndOriginalDirections, avoidLocations, marginX, marginY)

      local centers = ListLocation(#centerAndOriginalDirections)
      PopulateCenters(centerAndOriginalDirections, centers)
      centers:Sort(function (a, b)
        local c = System.Int32.CompareTo(a.Y, b.Y)
        if c ~= 0 then
          return c
        end

        return System.Int32.CompareTo(a.X, b.X)
      end)

      local centerToOriginalDirection = System.new(LocationIntDictionary_1Int32, 2, grid.Width, #centerAndOriginalDirections)
      local centerToTerminals = System.new(LocationIntDictionary_1ListTerminalLocation, 2, grid.Width, #centerAndOriginalDirections)
      local locationToTerminals = LocationIntDictionary_1ListTerminalLocation(grid.Width)


      PopulateCenterToOriginalDirection(centerAndOriginalDirections, centerToOriginalDirection)
      KnapcodeOilField.Helpers.PopulateCenterToTerminals(centerToTerminals, grid, centers)
      KnapcodeOilField.Helpers.PopulateLocationToTerminals(locationToTerminals, centerToTerminals)

      local default = KnapcodeOilField.Context()
      default.Options = options
      default.InputBlueprint = blueprint
      default.DeltaX = deltaX
      default.DeltaY = deltaY
      default.Grid = grid
      default.Centers = centers
      default.CenterToTerminals = centerToTerminals
      default.CenterToOriginalDirection = centerToOriginalDirection
      default.LocationToTerminals = locationToTerminals
      default.LocationToAdjacentCount = GetLocationToAdjacentCount(grid)
      default.SharedInstances = KnapcodeOilField.SharedInstances(grid)
      return default
    end
    PopulateCenters = function (centerAndOriginalDirections, centers)
      for i = 0, #centerAndOriginalDirections - 1 do
        centers:Add(centerAndOriginalDirections:get(i)[1])
      end
    end
    PopulateCenterToOriginalDirection = function (centerAndOriginalDirections, centerToOriginalDirection)
      for i = 0, #centerAndOriginalDirections - 1 do
        local pair = centerAndOriginalDirections:get(i)
        centerToOriginalDirection:Add(pair[1], pair[2])
      end
    end
    GetLocationToAdjacentCount = function (grid)
      local locationToHasAdjacentPumpjack = ArrayInt32(grid.Width * grid.Height)

      local neighbors = SpanLocation.ctorArray(ArrayLocation(4))


      for _, location in System.each(grid:getEntityLocations():EnumerateItems()) do
        local continue
        repeat
          local entity = grid:get(location)
          if not System.is(entity, KnapcodeOilField.PumpjackSide) then
            continue = true
            break
          end

          grid:GetAdjacent(neighbors, location)
          for i = 0, neighbors:getLength() - 1 do
            local continue
            repeat
              if not neighbors:get(i).IsValid then
                continue = true
                break
              end

              local default = locationToHasAdjacentPumpjack
              default:set(neighbors:get(i).Y * grid.Width + neighbors:get(i).X, default:get(neighbors:get(i).Y * grid.Width + neighbors:get(i).X) + 1)
              continue = true
            until 1
            if not continue then
              break
            end
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      return locationToHasAdjacentPumpjack
    end
    TranslateLocations = function (blueprint, avoid, marginX, marginY)
      local pumpjacks = ListEntity()
      for i = 0, #blueprint.Entities - 1 do
        local entity = blueprint.Entities:get(i)
        if entity.Name == "pumpjack" --[[Vanilla.Pumpjack]] then
          pumpjacks:Add(entity)
        end
      end

      if #pumpjacks > 150 --[[maxPumpjacks]] then
        System.throw(KnapcodeFactorioTools.FactorioToolsException("Having more than " .. 150 --[[maxPumpjacks]] .. " pumpjacks is not supported. There are " .. #pumpjacks .. " pumpjacks provided."))
      end

      local centerAndOriginalDirections = ListTuple(#pumpjacks)
      local avoidLocations = ListLocation(avoid:getCount())

      local deltaX = 0
      local deltaY = 0

      if #pumpjacks > 0 or avoid:getCount() > 0 then
        local minX = 3.40282347E+38 --[[Single.MaxValue]]
        local minY = 3.40282347E+38 --[[Single.MaxValue]]

        if #pumpjacks > 0 then
          minX = KnapcodeFactorioTools.CollectionExtensions.Min(pumpjacks, function (p)
            return p.Position.X
          end, KnapcodeFactorioToolsData.Entity, System.Single)
          minY = KnapcodeFactorioTools.CollectionExtensions.Min(pumpjacks, function (p)
            return p.Position.Y
          end, KnapcodeFactorioToolsData.Entity, System.Single)
        end

        if avoid:getCount() > 0 then
          minX = math.Min(minX, KnapcodeFactorioTools.CollectionExtensions.Min(avoid, function (a)
            return a.X
          end, KnapcodeOilField.AvoidLocation, System.Single))
          minY = math.Min(minY, KnapcodeFactorioTools.CollectionExtensions.Min(avoid, function (a)
            return a.Y
          end, KnapcodeOilField.AvoidLocation, System.Single))
        end

        deltaX = 0 - minX + marginX
        deltaY = 0 - minY + marginY

        for i = 0, #pumpjacks - 1 do
          local p = pumpjacks:get(i)
          local x = KnapcodeOilField.Helpers.ToInt(p.Position.X + deltaX, "Entity " .. p.EntityNumber .. " (a '" .. System.toString(p.Name) .. "') does not have an integer X value after translation.")
          local y = KnapcodeOilField.Helpers.ToInt(p.Position.Y + deltaY, "Entity " .. p.EntityNumber .. " (a '" .. System.toString(p.Name) .. "') does not have an integer Y value after translation.")
          local center = KnapcodeOilField.Location(x, y)
          local originalDirection = (p.Direction or 0 --[[Direction.Up]])
          centerAndOriginalDirections:Add(System.Tuple(center, originalDirection))
        end

        for i = 0, avoid:getCount() - 1 do
          local a = avoid:get(i)
          local x = KnapcodeOilField.Helpers.ToInt(a.X + deltaX, "Avoided location " .. i .. " does not have an integer X value after translation.")
          local y = KnapcodeOilField.Helpers.ToInt(a.Y + deltaY, "Avoided location " .. i .. " does not have an integer Y value after translation.")
          local avoidLocation = KnapcodeOilField.Location(x, y)
          avoidLocations:Add(avoidLocation)
        end
      end

      return System.Tuple(centerAndOriginalDirections, avoidLocations, deltaX, deltaY)
    end
    InitializeGrid = function (centerAndOriginalDirections, avoidLocations, marginX, marginY)
      -- Make a grid to contain game state. Similar to the above, we add extra spots for the pumpjacks, pipes, and
      -- electric poles.
      local width = marginX
      local height = marginY

      if #centerAndOriginalDirections > 0 or #avoidLocations > 0 then
        local maxX = -2147483648 --[[Int32.MinValue]]
        local maxY = -2147483648 --[[Int32.MinValue]]

        if #centerAndOriginalDirections > 0 then
          maxX = KnapcodeFactorioTools.CollectionExtensions.Max(centerAndOriginalDirections, function (p)
            return p[1].X
          end, System.Tuple, System.Int32)
          maxY = KnapcodeFactorioTools.CollectionExtensions.Max(centerAndOriginalDirections, function (p)
            return p[1].Y
          end, System.Tuple, System.Int32)
        end

        if #avoidLocations > 0 then
          maxX = math.Max(maxX, KnapcodeFactorioTools.CollectionExtensions.Max(avoidLocations, function (a)
            return a.X
          end, KnapcodeOilField.Location, System.Int32))
          maxY = math.Max(maxY, KnapcodeFactorioTools.CollectionExtensions.Max(avoidLocations, function (a)
            return a.Y
          end, KnapcodeOilField.Location, System.Int32))
        end

        width = width + ((1 + maxX))
        height = height + ((1 + maxY))
      end

      local area = width * height
      if width > 1000 --[[maxWidth]] or height > 1000 --[[maxHeight]] or area > 250000 --[[maxArea]] then
        System.throw(KnapcodeFactorioTools.FactorioToolsException(System.toString("The planning grid cannot be larger than " .. 1000 --[[maxWidth]] .. " x " .. 1000 --[[maxHeight]] .. " or an area larger than " .. 250000 --[[maxArea]] .. ". ") .. System.toString("The planning grid for the provided options is " .. width .. " x " .. height .. " with an area of " .. area .. ".")))
      end

      local grid = System.new(KnapcodeOilField.PipeGrid, 2, width, height)

      for i = 0, #centerAndOriginalDirections - 1 do
        KnapcodeOilField.Helpers.AddPumpjack(grid, centerAndOriginalDirections:get(i)[1])
      end

      for i = 0, #avoidLocations - 1 do
        local avoidLocation = avoidLocations:get(i)
        local entity = grid:get(avoidLocation)
        if entity ~= nil and not System.is(entity, KnapcodeOilField.AvoidEntity) then
          System.throw(KnapcodeFactorioTools.FactorioToolsException("Avoided location " .. i .. " has another entity already placed there (perhaps it's part of a pumpjack spot)."))
        end

        grid:AddEntity(avoidLocation, KnapcodeOilField.AvoidEntity(grid:GetId()))
      end

      return grid
    end
    return {
      Execute = Execute,
      GetEmpty = GetEmpty
    }
  end)
end)
