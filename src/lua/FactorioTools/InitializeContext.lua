-- Generated by CSharp.lua Compiler
local System = System
local ArrayInt32 = System.Array(System.Int32)
local KnapcodeFactorioTools
local KnapcodeFactorioToolsData
local KnapcodeOilField
local ArrayIcon
local ListTuple
local ListEntity
local ListLocation
local SpanLocation
local ArrayLocation
local ListTerminalLocation
local LocationIntDictionary_1Int32
local LocationIntDictionary_1ListTerminalLocation
System.import(function (out)
  KnapcodeFactorioTools = Knapcode.FactorioTools
  KnapcodeFactorioToolsData = Knapcode.FactorioTools.Data
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  ArrayIcon = System.Array(KnapcodeFactorioToolsData.Icon)
  ListTuple = System.List(System.Tuple)
  ListEntity = System.List(KnapcodeFactorioToolsData.Entity)
  ListLocation = System.List(KnapcodeOilField.Location)
  SpanLocation = System.Span(KnapcodeOilField.Location)
  ArrayLocation = System.Array(KnapcodeOilField.Location)
  ListTerminalLocation = System.List(KnapcodeOilField.TerminalLocation)
  LocationIntDictionary_1Int32 = KnapcodeOilField.LocationIntDictionary_1(System.Int32)
  LocationIntDictionary_1ListTerminalLocation = KnapcodeOilField.LocationIntDictionary_1(ListTerminalLocation)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("InitializeContext", function (namespace)
    local Execute, GetEmpty, Execute1, PopulateCenters, PopulateCenterToOriginalDirection, GetLocationToAdjacentCount, TranslateLocations, InitializeGrid, 
    class
    namespace.class("TranslatedLocations", function (namespace)
      local __members__, __ctor__
      __ctor__ = function (this, CenterAndOriginalDirections, AvoidLocations, DeltaX, DeltaY, Width, Height)
        this.CenterAndOriginalDirections = CenterAndOriginalDirections
        this.AvoidLocations = AvoidLocations
        this.DeltaX = DeltaX
        this.DeltaY = DeltaY
        this.Width = Width
        this.Height = Height
      end
      __members__ = function ()
        return "TranslatedLocations", "CenterAndOriginalDirections", "AvoidLocations", "DeltaX", "DeltaY", "Width", "Height"
      end
      return {
        DeltaX = 0,
        DeltaY = 0,
        Width = 0,
        Height = 0,
        base = function (out)
          return {
            System.RecordType,
            System.IEquatable_1(out.Knapcode.FactorioTools.OilField.InitializeContext.TranslatedLocations)
          }
        end,
        __members__ = __members__,
        __ctor__ = __ctor__
      }
    end)
    Execute = function (options, blueprint, avoid)
      return Execute1(options, blueprint, avoid, 0, 0)
    end
    GetEmpty = function (options, width, height)
      local default = KnapcodeFactorioToolsData.Blueprint()
      default.Entities = System.Array.Empty(KnapcodeFactorioToolsData.Entity)
      local extern = KnapcodeFactorioToolsData.Icon()
      extern.Index = 1
      local ref = KnapcodeFactorioToolsData.SignalID()
      ref.Name = "pumpjack" --[[Vanilla.Pumpjack]]
      ref.Type = "item" --[[Vanilla.Item]]
      extern.Signal = ref
      default.Icons = ArrayIcon(1, { extern })
      default.Item = "blueprint" --[[Vanilla.Blueprint]]
      default.Version = 1
      local blueprint = default

      return Execute1(options, blueprint, System.Array.Empty(KnapcodeOilField.AvoidLocation), width, height)
    end
    Execute1 = function (options, blueprint, avoid, minWidth, minHeight)
      local centerAndOriginalDirections, avoidLocations, deltaX, deltaY, width, height = TranslateLocations(options, blueprint, avoid, minWidth, minHeight):Deconstruct()

      local grid = InitializeGrid(centerAndOriginalDirections, avoidLocations, width, height)

      local centers = ListLocation(#centerAndOriginalDirections)
      PopulateCenters(centerAndOriginalDirections, centers)
      centers:Sort(function (a, b)
        local c = System.Int32.CompareTo(a.Y, b.Y)
        if c ~= 0 then
          return c
        end

        return System.Int32.CompareTo(a.X, b.X)
      end)

      local centerToOriginalDirection = System.new(LocationIntDictionary_1Int32, 2, grid.Width, #centerAndOriginalDirections)
      local centerToTerminals = System.new(LocationIntDictionary_1ListTerminalLocation, 2, grid.Width, #centerAndOriginalDirections)
      local locationToTerminals = LocationIntDictionary_1ListTerminalLocation(grid.Width)


      PopulateCenterToOriginalDirection(centerAndOriginalDirections, centerToOriginalDirection)
      KnapcodeOilField.Helpers.PopulateCenterToTerminals(centerToTerminals, grid, centers)
      KnapcodeOilField.Helpers.PopulateLocationToTerminals(locationToTerminals, centerToTerminals)

      local default = KnapcodeOilField.Context()
      default.Options = options
      default.InputBlueprint = blueprint
      default.DeltaX = deltaX
      default.DeltaY = deltaY
      default.Grid = grid
      default.Centers = centers
      default.CenterToTerminals = centerToTerminals
      default.CenterToOriginalDirection = centerToOriginalDirection
      default.LocationToTerminals = locationToTerminals
      default.LocationToAdjacentCount = GetLocationToAdjacentCount(grid)
      default.SharedInstances = KnapcodeOilField.SharedInstances(grid)
      return default
    end
    PopulateCenters = function (centerAndOriginalDirections, centers)
      for i = 0, #centerAndOriginalDirections - 1 do
        centers:Add(centerAndOriginalDirections:get(i)[1])
      end
    end
    PopulateCenterToOriginalDirection = function (centerAndOriginalDirections, centerToOriginalDirection)
      for i = 0, #centerAndOriginalDirections - 1 do
        local pair = centerAndOriginalDirections:get(i)
        centerToOriginalDirection:Add(pair[1], pair[2])
      end
    end
    GetLocationToAdjacentCount = function (grid)
      local locationToHasAdjacentPumpjack = ArrayInt32(grid.Width * grid.Height)

      local neighbors = SpanLocation.ctorArray(ArrayLocation(4))


      for _, location in System.each(grid:getEntityLocations():EnumerateItems()) do
        local continue
        repeat
          local entity = grid:get(location)
          if not System.is(entity, KnapcodeOilField.PumpjackSide) then
            continue = true
            break
          end

          grid:GetAdjacent(neighbors, location)
          for i = 0, neighbors:getLength() - 1 do
            local continue
            repeat
              if not neighbors:get(i).IsValid then
                continue = true
                break
              end

              local default = locationToHasAdjacentPumpjack
              default:set(neighbors:get(i).Y * grid.Width + neighbors:get(i).X, default:get(neighbors:get(i).Y * grid.Width + neighbors:get(i).X) + 1)
              continue = true
            until 1
            if not continue then
              break
            end
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      return locationToHasAdjacentPumpjack
    end
    TranslateLocations = function (options, blueprint, avoid, minWidth, minHeight)
      local pumpjacks = ListEntity()
      for i = 0, #blueprint.Entities - 1 do
        local entity = blueprint.Entities:get(i)
        if entity.Name == "pumpjack" --[[Vanilla.Pumpjack]] then
          pumpjacks:Add(entity)
        end
      end

      if #pumpjacks > 150 --[[maxPumpjacks]] then
        System.throw(KnapcodeFactorioTools.FactorioToolsException("Having more than " .. 150 --[[maxPumpjacks]] .. " pumpjacks is not supported. There are " .. #pumpjacks .. " pumpjacks provided."))
      end

      local centerAndOriginalDirections = ListTuple(#pumpjacks)
      local avoidLocations = ListLocation(avoid:getCount())

      local deltaX = 0
      local deltaY = 0

      if #pumpjacks == 0 and avoid:getCount() == 0 then
        return class.TranslatedLocations(centerAndOriginalDirections, avoidLocations, deltaX, deltaY, minWidth, minHeight)
      end

      local minX = 3.40282347E+38 --[[Single.MaxValue]]
      local minY = 3.40282347E+38 --[[Single.MaxValue]]
      local maxX = -3.40282347E+38 --[[Single.MinValue]]
      local maxY = -3.40282347E+38 --[[Single.MinValue]]

      if #pumpjacks > 0 then
        local pumpjackOffsetX = 1 --[[PumpjackWidth / 2]]
        local pumpjackOffsetY = 1 --[[PumpjackHeight / 2]]

        minX = KnapcodeFactorioTools.CollectionExtensions.Min(pumpjacks, function (p)
          return p.Position.X
        end, KnapcodeFactorioToolsData.Entity, System.Single) - pumpjackOffsetX
        minY = KnapcodeFactorioTools.CollectionExtensions.Min(pumpjacks, function (p)
          return p.Position.Y
        end, KnapcodeFactorioToolsData.Entity, System.Single) - pumpjackOffsetY
        maxX = KnapcodeFactorioTools.CollectionExtensions.Max(pumpjacks, function (p)
          return p.Position.X
        end, KnapcodeFactorioToolsData.Entity, System.Single) + pumpjackOffsetX
        maxY = KnapcodeFactorioTools.CollectionExtensions.Max(pumpjacks, function (p)
          return p.Position.Y
        end, KnapcodeFactorioToolsData.Entity, System.Single) + pumpjackOffsetY

        if options.AddBeacons then
          -- leave room around pumpjacks for beacons
          local beaconOffsetX = (System.div((options.BeaconSupplyWidth - 1), 2)) + (System.div(options.BeaconWidth, 2))
          local beaconOffsetY = (System.div((options.BeaconSupplyHeight - 1), 2)) + (System.div(options.BeaconHeight, 2))
          minX = minX - beaconOffsetX
          minY = minY - beaconOffsetY
          maxX = maxX + beaconOffsetX
          maxY = maxY + beaconOffsetY
        end
      end

      if avoid:getCount() > 0 then
        minX = math.Min(minX, KnapcodeFactorioTools.CollectionExtensions.Min(avoid, function (a)
          return a.X
        end, KnapcodeOilField.AvoidLocation, System.Single))
        minY = math.Min(minY, KnapcodeFactorioTools.CollectionExtensions.Min(avoid, function (a)
          return a.Y
        end, KnapcodeOilField.AvoidLocation, System.Single))
        maxX = math.Max(maxX, KnapcodeFactorioTools.CollectionExtensions.Max(avoid, function (a)
          return a.X
        end, KnapcodeOilField.AvoidLocation, System.Single))
        maxY = math.Max(maxY, KnapcodeFactorioTools.CollectionExtensions.Max(avoid, function (a)
          return a.Y
        end, KnapcodeOilField.AvoidLocation, System.Single))
      end

      -- Leave some space on all sides to cover:
      -- - A spot for a pipe.
      -- - A spot for a electric pole.
      minX = minX - ((1 + options.ElectricPoleWidth))
      minY = minY - ((1 + options.ElectricPoleHeight))
      maxX = maxX + ((1 + options.ElectricPoleWidth))
      maxY = maxY + ((1 + options.ElectricPoleHeight))

      deltaX = - minX
      deltaY = - minY

      local width = KnapcodeOilField.Helpers.ToInt(maxX - minX, "The grid width is not an integer after translation.") + 1
      local height = KnapcodeOilField.Helpers.ToInt(maxY - minY, "The grid height is not an integer after translation.") + 1

      if minWidth > width then
        deltaX = deltaX + ((System.div((minWidth - width), 2)))
        width = minWidth
      end

      if minHeight > height then
        deltaY = deltaY + ((System.div((minHeight - height), 2)))
        height = minHeight
      end

      for i = 0, #pumpjacks - 1 do
        local p = pumpjacks:get(i)
        local x = KnapcodeOilField.Helpers.ToInt(p.Position.X + deltaX, "Entity " .. p.EntityNumber .. " (a '" .. System.toString(p.Name) .. "') does not have an integer X value after translation.")
        local y = KnapcodeOilField.Helpers.ToInt(p.Position.Y + deltaY, "Entity " .. p.EntityNumber .. " (a '" .. System.toString(p.Name) .. "') does not have an integer Y value after translation.")
        local center = KnapcodeOilField.Location(x, y)
        local originalDirection = (p.Direction or 0 --[[Direction.Up]])
        centerAndOriginalDirections:Add(System.Tuple(center, originalDirection))
      end

      for i = 0, avoid:getCount() - 1 do
        local a = avoid:get(i)
        local x = KnapcodeOilField.Helpers.ToInt(a.X + deltaX, "Avoided location " .. i .. " does not have an integer X value after translation.")
        local y = KnapcodeOilField.Helpers.ToInt(a.Y + deltaY, "Avoided location " .. i .. " does not have an integer Y value after translation.")
        local avoidLocation = KnapcodeOilField.Location(x, y)
        avoidLocations:Add(avoidLocation)
      end


      return class.TranslatedLocations(centerAndOriginalDirections, avoidLocations, deltaX, deltaY, width, height)
    end
    InitializeGrid = function (centerAndOriginalDirections, avoidLocations, width, height)
      local area = width * height
      if width > 1000 --[[maxWidth]] or height > 1000 --[[maxHeight]] or area > 250000 --[[maxArea]] then
        System.throw(KnapcodeFactorioTools.FactorioToolsException(System.toString("The planning grid cannot be larger than " .. 1000 --[[maxWidth]] .. " x " .. 1000 --[[maxHeight]] .. " or an area larger than " .. 250000 --[[maxArea]] .. ". ") .. System.toString("The planning grid for the provided options is " .. width .. " x " .. height .. " with an area of " .. area .. ".")))
      end

      local grid = System.new(KnapcodeOilField.PipeGrid, 2, width, height)

      for i = 0, #centerAndOriginalDirections - 1 do
        KnapcodeOilField.Helpers.AddPumpjack(grid, centerAndOriginalDirections:get(i)[1])
      end

      for i = 0, #avoidLocations - 1 do
        local avoidLocation = avoidLocations:get(i)
        local entity = grid:get(avoidLocation)
        if entity ~= nil and not System.is(entity, KnapcodeOilField.AvoidEntity) then
          System.throw(KnapcodeFactorioTools.FactorioToolsException("Avoided location " .. i .. " has another entity already placed there (perhaps it's part of a pumpjack spot)."))
        end

        grid:AddEntity(avoidLocation, KnapcodeOilField.AvoidEntity(grid:GetId()))
      end

      return grid
    end
    class = {
      Execute = Execute,
      GetEmpty = GetEmpty,
      Execute1 = Execute1
    }
    return class
  end)
end)
