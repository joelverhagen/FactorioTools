-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeOilField
local HashSetLocation
System.import(function (out)
  KnapcodeOilField = Knapcode.FactorioTools.OilField
  HashSetLocation = System.HashSet(KnapcodeOilField.Location)
end)
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("LocationHashSet", function (namespace)
    local getCount, Add, Clear, Contains, CopyTo, EnumerateItems, ExceptWith, Overlaps, 
    Remove, SetEquals, UnionWith, UnionWith1, class, __ctor1__, __ctor2__, __ctor3__
    __ctor1__ = function (this)
      this._set = HashSetLocation()
    end
    __ctor2__ = function (this, existing)
      this._set = HashSetLocation(existing._set)
    end
    __ctor3__ = function (this, capacity)
      this._set = HashSetLocation(capacity)
    end
    getCount = function (this)
      return this._set:getCount()
    end
    Add = function (this, location)
      return this._set:Add(location)
    end
    Clear = function (this)
      this._set:Clear()
    end
    Contains = function (this, location)
      return this._set:Contains(location)
    end
    CopyTo = function (this, array)
      local index = 0
      for _, item in System.each(this._set) do
        array:set(index, item)
        index = index + 1
      end
    end
    EnumerateItems = function (this)
      return this._set
    end
    ExceptWith = function (this, other)
      if other:getCount() == 0 then
        return
      else
        for _, item in System.each(other:EnumerateItems()) do
          this._set:Remove(item)
        end
      end
    end
    Overlaps = function (this, other)
      return this._set:Overlaps(other)
    end
    Remove = function (this, location)
      return this._set:Remove(location)
    end
    SetEquals = function (this, other)
      local otherSet = System.cast(class, other)
      return this._set:SetEquals(otherSet._set)
    end
    UnionWith = function (this, other)
      this._set:UnionWith(other)
    end
    UnionWith1 = function (this, other)
      if other:getCount() == 0 then
        return
      elseif other:getCount() == 1 then
        for _, item in System.each(other:EnumerateItems()) do
          this._set:Add(item)
        end
      else
        local otherSet = System.cast(class, other)
        this._set:UnionWith(otherSet._set)
      end
    end
    class = {
      base = function (out)
        return {
          out.Knapcode.FactorioTools.OilField.ILocationSet
        }
      end,
      getCount = getCount,
      Height = 0,
      Width = 0,
      Add = Add,
      Clear = Clear,
      Contains = Contains,
      CopyTo = CopyTo,
      EnumerateItems = EnumerateItems,
      ExceptWith = ExceptWith,
      Overlaps = Overlaps,
      Remove = Remove,
      SetEquals = SetEquals,
      UnionWith = UnionWith,
      UnionWith1 = UnionWith1,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      }
    }
    return class
  end)
end)
