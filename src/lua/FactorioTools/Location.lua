-- Generated by CSharp.lua Compiler
local System = System
System.namespace("Knapcode.FactorioTools.OilField", function (namespace)
  namespace.class("Location", function (namespace)
    local getInvalid, EqualsObj, Equals, GetHashCode, GetManhattanDistance, GetEuclideanDistance, GetEuclideanDistanceSquared, GetEuclideanDistance1, 
    GetEuclideanDistanceSquared1, GetEuclideanDistanceSquared2, Translate, Translate1, CompareTo, op_Equality, op_Inequality, op_LessThan, 
    op_LessThanOrEqual, op_GreaterThan, op_GreaterThanOrEqual, ToString, ToString1, class, __ctor__
    __ctor__ = function (this, x, y)
      this.X = x
      this.Y = y
      this.IsValid = this.X >= 0 and this.Y >= 0
    end
    getInvalid = function ()
      return class(- 1, - 1)
    end
    EqualsObj = function (this, obj)
      local location = obj
      return System.is(location, class) and Equals(this, location)
    end
    Equals = function (this, other)
      if other == nil then
        return false
      end

      if System.Object.ReferenceEquals(this, other) then
        return true
      end



      return this.X == other.X and this.Y == other.Y
    end
    GetHashCode = function (this)
      System.throw(System.NotSupportedException())
    end
    GetManhattanDistance = function (this, other)
      return math.Abs(this.X - other.X) + math.Abs(this.Y - other.Y)
    end
    GetEuclideanDistance = function (this, other)
      local deltaX = this.X - other.X
      local deltaY = this.Y - other.Y
      return math.Sqrt((deltaX * deltaX) + (deltaY * deltaY))
    end
    GetEuclideanDistanceSquared = function (this, other)
      local deltaX = this.X - other.X
      local deltaY = this.Y - other.Y
      return (deltaX * deltaX) + (deltaY * deltaY)
    end
    GetEuclideanDistance1 = function (this, bX, bY)
      local deltaX = this.X - bX
      local deltaY = this.Y - bY
      return math.Sqrt((deltaX * deltaX) + (deltaY * deltaY))
    end
    GetEuclideanDistanceSquared1 = function (this, bX, bY)
      local deltaX = this.X - bX
      local deltaY = this.Y - bY
      return (deltaX * deltaX) + (deltaY * deltaY)
    end
    GetEuclideanDistanceSquared2 = function (this, bX, bY)
      local deltaX = this.X - bX
      local deltaY = this.Y - bY
      return (deltaX * deltaX) + (deltaY * deltaY)
    end
    Translate = function (this, deltaX, deltaY)
      return class(this.X + deltaX, this.Y + deltaY)
    end
    Translate1 = function (this, translation)
      return class(this.X + translation.X, this.Y + translation.Y)
    end
    CompareTo = function (this, other)
      if other == nil then
        return 1
      end


      local x = System.Int32.CompareTo(this.X, other.X)
      if x ~= 0 then
        return x
      end

      return System.Int32.CompareTo(this.Y, other.Y)
    end
    op_Equality = function (left, right)
      return Equals(left, right)
    end
    op_Inequality = function (left, right)
      return not (op_Equality(left, right))
    end
    op_LessThan = function (left, right)
      return CompareTo(left, right) < 0
    end
    op_LessThanOrEqual = function (left, right)
      return CompareTo(left, right) <= 0
    end
    op_GreaterThan = function (left, right)
      return CompareTo(left, right) > 0
    end
    op_GreaterThanOrEqual = function (left, right)
      return CompareTo(left, right) >= 0
    end
    ToString = function (this)
      return ToString1(this, "S")
    end
    ToString1 = function (this, format, formatProvider)
      if format == nil then
        format = "S"
      end

      local default
      local extern = format
      if extern == "M" then
        default = "(" .. this.X .. ", " .. this.Y .. ")"
      elseif extern == "S" then
        default = "(" .. this.X .. ", " .. this.Y .. ") / (Ln " .. this.Y + 1 .. ", Col " .. this.X + 1 .. ")"
      else
        default = System.throw(System.ArgumentException("Format string is not supported. Use 'M' or 'S'.", "format" --[[nameof(format)]]))
      end
      return default
    end
    class = {
      base = function (out)
        return {
          System.IFormattable,
          System.IEquatable_1(out.Knapcode.FactorioTools.OilField.Location),
          System.IComparable_1(out.Knapcode.FactorioTools.OilField.Location)
        }
      end,
      X = 0,
      Y = 0,
      IsValid = false,
      getInvalid = getInvalid,
      EqualsObj = EqualsObj,
      Equals = Equals,
      GetHashCode = GetHashCode,
      GetManhattanDistance = GetManhattanDistance,
      GetEuclideanDistance = GetEuclideanDistance,
      GetEuclideanDistanceSquared = GetEuclideanDistanceSquared,
      GetEuclideanDistance1 = GetEuclideanDistance1,
      GetEuclideanDistanceSquared1 = GetEuclideanDistanceSquared1,
      GetEuclideanDistanceSquared2 = GetEuclideanDistanceSquared2,
      Translate = Translate,
      Translate1 = Translate1,
      CompareTo = CompareTo,
      op_Equality = op_Equality,
      op_Inequality = op_Inequality,
      op_LessThan = op_LessThan,
      op_LessThanOrEqual = op_LessThanOrEqual,
      op_GreaterThan = op_GreaterThan,
      op_GreaterThanOrEqual = op_GreaterThanOrEqual,
      ToString = ToString,
      ToString1 = ToString1,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
