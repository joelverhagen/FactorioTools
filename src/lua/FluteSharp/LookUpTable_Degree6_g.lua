-- Generated by CSharp.lua Compiler
-- <auto-generated/>
local System = System
local SystemIO = System.IO
local ArrayByte = System.Array(System.Byte)
local ArrayChar = System.Array(System.Char)
local ArrayInt32 = System.Array(System.Int32)
local ArrayInt322 = System.Array(System.Int32, 2)
local KnapcodeFluteSharp
local ArrayCsoln
local ArrayArrayCsoln2
System.import(function (out)
  KnapcodeFluteSharp = Knapcode.FluteSharp
  ArrayCsoln = System.Array(KnapcodeFluteSharp.Csoln)
  ArrayArrayCsoln2 = System.Array(ArrayCsoln, 2)
end)
System.namespace("Knapcode.FluteSharp", function (namespace)
  namespace.class("LookUpTable", function (namespace)
    local POWV6, POST6, getDegree6, numgrp, readLUT, readLine, readChars, scanNumber, 
    scanString, scanEOL, isDigit, class, static, __ctor1__, __ctor2__, __ctor3__
    namespace.class("ByteReader", function (namespace)
      local NewReadByte, ReadByte, class, __ctor__
      __ctor__ = function (this, data)
        this._data = data
        this._eof = #data == 0
      end
      NewReadByte = function (data)
        local iterator = class(data)
        return System.fn(iterator, ReadByte)
      end
      ReadByte = function (this)
        if this._eof then
          return - 1
        end

        local b = this._data:get(this._index)

        this._index = this._index + 1
        if this._index >= #this._data then
          this._eof = true
        end

        return b
      end
      class = {
        _eof = false,
        _index = 0,
        NewReadByte = NewReadByte,
        ReadByte = ReadByte,
        __ctor__ = __ctor__
      }
      return class
    end)
    static = function (this)
      POWV6 = ArrayByte { 100, 61, 52, 10, 49, 10, 48, 36, 10, 48, 48, 10, 50, 10, 48, 52, 36, 10, 48, 49, 36, 10, 48, 50, 10, 48, 50, 10, 48, 50, 10, 100, 61, 53, 10, 49, 10, 48, 36, 10, 48, 48, 10, 50, 10, 48, 53, 36, 10, 48, 50, 36, 10, 51, 10, 48, 53, 54, 36, 10, 48, 50, 54, 36, 10, 48, 49, 50, 36, 10, 48, 51, 10, 48, 50, 10, 48, 50, 10, 48, 50, 10, 48, 51, 10, 48, 51, 10, 48, 51, 10, 48, 51, 10, 51, 10, 48, 53, 54, 36, 10, 48, 49, 54, 36, 10, 48, 49, 50, 36, 10, 48, 49, 50, 10, 48, 49, 50, 10, 48, 51, 10, 48, 51, 10, 48, 49, 50, 10, 50, 10, 48, 53, 36, 10, 48, 49, 36, 10, 48, 49, 56, 10, 50, 10, 48, 54, 36, 10, 48, 49, 36, 10, 48, 50, 48, 10, 51, 10, 48, 53, 54, 36, 10, 48, 49, 53, 36, 10, 48, 49, 50, 36, 10, 50, 10, 48, 53, 54, 36, 10, 48, 49, 50, 36, 10, 48, 50, 51, 10, 48, 50, 50, 10, 48, 50, 50, 10, 48, 50, 50, 10, 48, 50, 51, 10, 48, 50, 51, 10, 100, 61, 54, 10, 49, 10, 48, 36, 10, 48, 48, 10, 50, 10, 48, 54, 36, 10, 48, 51, 36, 10, 51, 10, 48, 54, 55, 36, 10, 48, 55, 51, 36, 10, 48, 50, 51, 36, 10, 52, 10, 48, 54, 55, 56, 36, 10, 49, 51, 36, 54, 10, 50, 50, 36, 55, 10, 51, 49, 36, 56, 10, 48, 52, 10, 48, 50, 10, 48, 50, 10, 48, 50, 10, 48, 51, 10, 48, 52, 10, 48, 52, 10, 48, 51, 10, 48, 51, 10, 51, 10, 48, 54, 55, 36, 10, 48, 50, 55, 36, 10, 48, 50, 51, 36, 10, 48, 49, 52, 10, 53, 10, 48, 54, 55, 56, 36, 10, 49, 50, 36, 54, 10, 50, 51, 36, 55, 10, 51, 49, 54, 36, 56, 10, 52, 50, 36, 54, 10, 48, 49, 54, 10, 48, 52, 10, 48, 52, 10, 48, 49, 54, 10, 53, 10, 48, 54, 55, 56, 36, 10, 49, 50, 36, 54, 10, 50, 49, 36, 55, 10, 51, 54, 51, 36, 56, 10, 52, 50, 36, 54, 10, 48, 50, 49, 10, 48, 50, 49, 10, 48, 52, 10, 48, 52, 10, 48, 49, 54, 10, 48, 50, 49, 10, 51, 10, 48, 54, 55, 36, 10, 48, 50, 55, 36, 10, 48, 49, 50, 36, 10, 48, 50, 56, 10, 50, 10, 48, 55, 36, 10, 48, 50, 36, 10, 48, 51, 48, 10, 51, 10, 48, 54, 55, 36, 10, 48, 54, 50, 36, 10, 48, 50, 51, 36, 10, 50, 10, 48, 54, 55, 36, 10, 48, 50, 51, 36, 10, 52, 10, 48, 54, 55, 56, 36, 10, 48, 50, 51, 56, 36, 10, 50, 49, 54, 36, 56, 10, 51, 50, 36, 54, 10, 48, 51, 52, 10, 48, 51, 50, 10, 48, 51, 50, 10, 48, 51, 50, 10, 48, 51, 51, 10, 48, 51, 52, 10, 48, 51, 52, 10, 48, 51, 51, 10, 48, 51, 51, 10, 48, 49, 52, 10, 48, 49, 52, 10, 48, 49, 54, 10, 48, 49, 54, 10, 48, 51, 52, 10, 48, 51, 52, 10, 48, 49, 54, 10, 48, 50, 49, 10, 48, 50, 49, 10, 48, 50, 49, 10, 48, 51, 52, 10, 48, 51, 52, 10, 48, 49, 54, 10, 48, 50, 49, 10, 48, 50, 56, 10, 48, 50, 56, 10, 51, 10, 48, 55, 56, 36, 10, 48, 50, 56, 36, 10, 48, 49, 50, 36, 10, 48, 54, 48, 10, 53, 10, 48, 54, 55, 56, 36, 10, 49, 50, 36, 55, 10, 50, 49, 36, 56, 10, 50, 51, 36, 54, 10, 51, 50, 51, 36, 54, 10, 56, 10, 48, 54, 55, 55, 56, 36, 10, 49, 49, 36, 55, 10, 49, 51, 36, 55, 10, 50, 50, 36, 56, 10, 51, 50, 36, 54, 10, 52, 51, 36, 55, 10, 54, 56, 36, 54, 10, 54, 50, 36, 54, 10, 55, 10, 48, 54, 55, 55, 56, 36, 10, 49, 49, 36, 55, 10, 49, 51, 36, 55, 10, 51, 50, 36, 54, 10, 52, 49, 36, 55, 10, 53, 54, 36, 56, 10, 54, 50, 36, 54, 10, 48, 54, 52, 10, 48, 54, 50, 10, 48, 54, 50, 10, 48, 54, 50, 10, 48, 54, 51, 10, 48, 54, 52, 10, 48, 54, 52, 10, 48, 54, 51, 10, 48, 54, 51, 10, 53, 10, 48, 49, 55, 56, 36, 10, 49, 50, 36, 56, 10, 50, 51, 36, 55, 10, 49, 54, 55, 36, 49, 10, 52, 51, 36, 55, 10, 48, 55, 52, 10, 52, 10, 48, 49, 55, 56, 36, 10, 48, 49, 50, 51, 36, 10, 49, 54, 55, 36, 49, 10, 51, 51, 36, 55, 10, 48, 55, 54, 10, 48, 54, 52, 10, 48, 54, 52, 10, 48, 55, 54, 10, 52, 10, 48, 54, 55, 56, 36, 10, 49, 49, 36, 54, 10, 50, 50, 36, 55, 10, 51, 51, 36, 56, 10, 48, 56, 49, 10, 48, 56, 49, 10, 48, 54, 52, 10, 48, 54, 52, 10, 48, 55, 54, 10, 48, 56, 49, 10, 51, 10, 48, 54, 55, 36, 10, 48, 49, 55, 36, 10, 48, 49, 50, 36, 10, 48, 56, 56, 10, 48, 54, 48, 10, 48, 54, 48, 10, 48, 54, 50, 10, 48, 54, 51, 10, 53, 10, 48, 54, 55, 51, 36, 10, 49, 50, 36, 54, 10, 50, 49, 36, 55, 10, 49, 55, 56, 36, 51, 10, 52, 49, 36, 55, 10, 48, 57, 52, 10, 48, 54, 50, 10, 48, 54, 50, 10, 48, 54, 50, 10, 48, 54, 51, 10, 48, 57, 52, 10, 48, 57, 52, 10, 48, 54, 51, 10, 48, 54, 51, 10, 48, 55, 52, 10, 48, 55, 52, 10, 53, 10, 48, 54, 55, 51, 36, 10, 49, 49, 36, 54, 10, 50, 56, 36, 51, 10, 50, 50, 36, 55, 10, 49, 55, 56, 36, 51, 10, 48, 49, 48, 54, 10, 48, 57, 52, 10, 48, 57, 52, 10, 48, 49, 48, 54, 10, 52, 10, 48, 54, 56, 36, 10, 48, 54, 51, 36, 10, 48, 49, 56, 36, 10, 48, 49, 51, 36, 10, 48, 49, 49, 49, 10, 48, 49, 49, 49, 10, 48, 57, 52, 10, 48, 57, 52, 10, 48, 49, 48, 54, 10, 48, 49, 49, 49, 10, 50, 10, 48, 54, 36, 10, 48, 49, 36, 10, 48, 49, 49, 56, 10, 50, 10, 48, 56, 36, 10, 48, 49, 36, 10, 48, 49, 50, 48, 10, 52, 10, 48, 54, 56, 36, 10, 48, 49, 54, 36, 10, 48, 51, 56, 36, 10, 48, 49, 51, 36, 10, 53, 10, 48, 49, 54, 55, 36, 10, 49, 51, 36, 54, 10, 50, 56, 36, 49, 10, 50, 50, 36, 55, 10, 49, 55, 56, 36, 49, 10, 52, 10, 48, 55, 51, 56, 36, 10, 48, 49, 50, 51, 36, 10, 49, 54, 55, 36, 51, 10, 51, 49, 36, 55, 10, 48, 49, 50, 52, 10, 48, 49, 50, 50, 10, 48, 49, 50, 50, 10, 48, 49, 50, 50, 10, 48, 49, 50, 51, 10, 48, 49, 50, 52, 10, 48, 49, 50, 52, 10, 48, 49, 50, 51, 10, 48, 49, 50, 51, 10, 53, 10, 48, 49, 54, 55, 36, 10, 49, 50, 36, 54, 10, 50, 51, 36, 55, 10, 49, 55, 56, 36, 49, 10, 52, 51, 36, 55, 10, 48, 49, 51, 52, 10, 55, 10, 48, 54, 55, 55, 56, 36, 10, 49, 49, 36, 55, 10, 49, 51, 36, 55, 10, 50, 50, 36, 54, 10, 52, 51, 36, 55, 10, 53, 54, 36, 56, 10, 54, 50, 36, 54, 10, 48, 49, 51, 54, 10, 48, 49, 50, 52, 10, 48, 49, 50, 52, 10, 48, 49, 51, 54, 10, 52, 10, 48, 54, 55, 56, 36, 10, 48, 49, 50, 56, 36, 10, 50, 54, 51, 36, 56, 10, 51, 50, 36, 54, 10, 48, 49, 52, 49, 10, 48, 49, 52, 49, 10, 48, 49, 50, 52, 10, 48, 49, 50, 52, 10, 48, 49, 51, 54, 10, 48, 49, 52, 49, 10, 50, 10, 48, 54, 55, 36, 10, 48, 49, 50, 36, 10, 48, 49, 52, 56, 10, 51, 10, 48, 55, 56, 36, 10, 48, 49, 55, 36, 10, 48, 49, 50, 36, 10, 48, 49, 53, 48, 10, 52, 10, 48, 54, 55, 56, 36, 10, 49, 49, 36, 56, 10, 50, 50, 36, 55, 10, 51, 51, 36, 54, 10, 52, 10, 48, 49, 54, 55, 36, 10, 48, 49, 50, 51, 36, 10, 49, 55, 56, 36, 49, 10, 51, 51, 36, 55, 10, 54, 10, 48, 54, 55, 55, 56, 36, 10, 49, 49, 36, 55, 10, 49, 51, 36, 55, 10, 48, 49, 54, 50, 51, 36, 10, 52, 56, 36, 54, 10, 52, 50, 36, 54, 10, 48, 49, 53, 52, 10, 48, 49, 53, 50, 10, 48, 49, 53, 50, 10, 48, 49, 53, 50, 10, 48, 49, 53, 51, 10, 48, 49, 53, 52, 10, 48, 49, 53, 52, 10, 48, 49, 53, 51, 10, 48, 49, 53, 51, 10, 48, 49, 51, 52, 10, 48, 49, 51, 52, 10, 48, 49, 51, 54, 10, 48, 49, 51, 54, 10, 48, 49, 53, 52, 10, 48, 49, 53, 52, 10, 48, 49, 51, 54, 10, 48, 49, 52, 49, 10, 48, 49, 52, 49, 10, 48, 49, 52, 49, 10, 48, 49, 53, 52, 10, 48, 49, 53, 52, 10, 48, 49, 51, 54, 10, 48, 49, 52, 49, 10, 48, 49, 52, 56, 10, 48, 49, 52, 56, 10 }
      POST6 = ArrayByte { 100, 61, 52, 10, 73, 88, 68, 85, 85, 10, 72, 88, 68, 85, 85, 10, 72, 73, 84, 84, 85, 10, 100, 61, 53, 10, 74, 89, 104, 85, 103, 118, 102, 10, 74, 88, 104, 85, 103, 118, 119, 10, 74, 88, 89, 85, 103, 103, 119, 10, 73, 89, 105, 85, 103, 118, 119, 10, 73, 88, 89, 85, 103, 103, 119, 10, 88, 89, 90, 118, 87, 86, 119, 10, 73, 89, 105, 85, 103, 118, 119, 10, 72, 73, 105, 101, 87, 118, 119, 10, 88, 89, 90, 117, 87, 102, 102, 10, 72, 88, 106, 85, 103, 118, 119, 10, 72, 73, 106, 101, 87, 118, 119, 10, 73, 89, 104, 85, 103, 118, 119, 10, 73, 74, 104, 101, 103, 118, 101, 10, 73, 89, 105, 85, 103, 118, 119, 10, 73, 74, 105, 101, 103, 119, 87, 10, 88, 89, 90, 117, 118, 86, 119, 10, 73, 89, 105, 85, 103, 118, 119, 10, 88, 89, 90, 117, 103, 86, 119, 10, 100, 61, 54, 10, 75, 90, 105, 120, 102, 120, 153, 120, 136, 10, 75, 90, 104, 120, 102, 120, 153, 120, 153, 10, 75, 90, 104, 105, 102, 120, 152, 121, 153, 10, 75, 89, 105, 121, 102, 120, 153, 120, 153, 10, 75, 89, 104, 105, 102, 120, 152, 121, 153, 10, 75, 104, 105, 106, 102, 135, 151, 152, 153, 10, 74, 89, 105, 121, 102, 120, 153, 120, 136, 10, 74, 89, 104, 105, 102, 120, 152, 121, 153, 10, 74, 104, 105, 106, 102, 135, 151, 152, 153, 10, 89, 90, 91, 104, 135, 105, 137, 119, 118, 10, 75, 89, 105, 121, 102, 120, 153, 120, 153, 10, 75, 88, 89, 121, 102, 119, 153, 136, 153, 10, 75, 104, 105, 106, 102, 119, 152, 152, 136, 10, 74, 89, 105, 121, 102, 120, 153, 120, 136, 10, 74, 88, 89, 121, 102, 119, 153, 136, 153, 10, 74, 104, 105, 106, 102, 119, 152, 152, 153, 10, 89, 90, 91, 105, 135, 105, 137, 119, 118, 10, 104, 105, 106, 107, 152, 102, 151, 120, 136, 10, 73, 89, 105, 122, 102, 120, 153, 120, 153, 10, 73, 88, 89, 122, 102, 119, 153, 136, 136, 10, 88, 89, 90, 122, 135, 102, 153, 120, 136, 10, 89, 105, 106, 107, 150, 103, 152, 119, 120, 10, 104, 105, 106, 107, 151, 102, 152, 119, 120, 10, 73, 89, 105, 123, 102, 120, 153, 120, 136, 10, 73, 88, 89, 123, 102, 119, 153, 136, 136, 10, 88, 89, 90, 123, 135, 102, 153, 120, 136, 10, 75, 89, 105, 120, 102, 120, 153, 120, 153, 10, 75, 89, 90, 120, 102, 120, 153, 137, 121, 10, 75, 89, 105, 121, 102, 120, 153, 120, 153, 10, 75, 89, 90, 121, 102, 120, 153, 137, 121, 10, 75, 104, 105, 106, 102, 121, 135, 152, 153, 10, 75, 89, 105, 121, 102, 120, 153, 120, 153, 10, 75, 104, 105, 106, 102, 120, 151, 152, 153, 10, 74, 89, 105, 121, 102, 120, 153, 120, 136, 10, 74, 104, 105, 106, 102, 120, 151, 152, 153, 10, 89, 90, 91, 105, 135, 105, 137, 119, 118, 10, 104, 105, 106, 107, 152, 103, 150, 120, 153, 10, 74, 90, 106, 120, 102, 120, 153, 120, 136, 10, 74, 89, 90, 120, 102, 120, 153, 136, 135, 10, 89, 90, 91, 120, 135, 104, 153, 120, 134, 10, 74, 90, 106, 121, 102, 120, 153, 120, 136, 10, 74, 89, 90, 121, 102, 120, 153, 136, 135, 10, 89, 90, 91, 121, 135, 104, 153, 120, 134, 10, 74, 104, 105, 106, 102, 121, 135, 152, 153, 10, 104, 105, 106, 107, 152, 105, 118, 120, 153, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 89, 90, 106, 122, 118, 104, 153, 120, 136, 10, 73, 89, 105, 106, 102, 121, 152, 120, 153, 10, 89, 90, 91, 122, 134, 104, 153, 119, 119, 10, 73, 88, 89, 106, 102, 121, 151, 136, 136, 10, 89, 105, 106, 107, 150, 105, 135, 120, 136, 10, 88, 89, 90, 106, 135, 105, 150, 120, 153, 10, 104, 105, 106, 107, 151, 105, 134, 120, 153, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 89, 90, 106, 122, 118, 104, 153, 120, 136, 10, 73, 89, 105, 106, 102, 121, 152, 120, 153, 10, 73, 88, 89, 106, 102, 121, 151, 136, 136, 10, 88, 89, 90, 106, 135, 105, 150, 120, 153, 10, 89, 105, 106, 107, 150, 104, 151, 120, 136, 10, 104, 105, 106, 107, 151, 104, 150, 120, 153, 10, 88, 90, 106, 122, 118, 104, 153, 120, 136, 10, 88, 90, 91, 122, 134, 104, 153, 119, 119, 10, 88, 105, 106, 107, 150, 105, 135, 120, 136, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 73, 89, 105, 106, 102, 121, 152, 120, 153, 10, 88, 90, 106, 122, 118, 104, 153, 120, 136, 10, 88, 105, 106, 107, 150, 104, 151, 120, 136, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 73, 89, 105, 106, 102, 121, 152, 120, 153, 10, 73, 89, 105, 122, 102, 120, 153, 120, 153, 10, 72, 73, 105, 122, 118, 104, 153, 120, 136, 10, 88, 89, 90, 122, 134, 103, 153, 120, 136, 10, 88, 105, 106, 107, 150, 103, 152, 119, 120, 10, 73, 89, 105, 123, 102, 120, 153, 120, 136, 10, 72, 73, 105, 123, 118, 104, 153, 120, 136, 10, 88, 89, 90, 123, 134, 103, 153, 120, 136, 10, 73, 89, 105, 107, 102, 121, 152, 120, 153, 10, 73, 88, 89, 107, 102, 121, 151, 136, 136, 10, 88, 89, 90, 107, 135, 105, 150, 120, 153, 10, 74, 90, 106, 122, 102, 120, 153, 119, 120, 10, 89, 90, 106, 122, 118, 104, 153, 120, 136, 10, 73, 89, 105, 107, 102, 121, 152, 120, 153, 10, 88, 90, 106, 107, 118, 105, 152, 119, 120, 10, 88, 90, 106, 122, 118, 104, 153, 120, 136, 10, 88, 105, 106, 107, 134, 105, 151, 120, 136, 10, 74, 90, 106, 122, 102, 120, 153, 119, 120, 10, 73, 89, 106, 122, 102, 120, 153, 119, 120, 10, 73, 89, 106, 107, 102, 121, 152, 119, 120, 10, 72, 73, 106, 122, 118, 104, 153, 120, 153, 10, 88, 89, 106, 107, 118, 105, 152, 119, 120, 10, 72, 88, 106, 123, 102, 120, 153, 120, 136, 10, 72, 73, 106, 123, 118, 104, 153, 120, 136, 10, 74, 90, 105, 120, 102, 120, 153, 120, 153, 10, 74, 75, 105, 120, 118, 120, 153, 134, 136, 10, 74, 90, 105, 121, 102, 120, 153, 120, 136, 10, 74, 75, 105, 121, 118, 120, 153, 134, 136, 10, 74, 90, 104, 105, 102, 120, 152, 119, 151, 10, 90, 91, 104, 105, 118, 120, 152, 150, 153, 10, 89, 91, 105, 121, 118, 120, 153, 134, 136, 10, 89, 91, 104, 105, 118, 120, 152, 150, 153, 10, 74, 90, 104, 106, 102, 120, 152, 121, 153, 10, 91, 104, 105, 106, 104, 103, 151, 152, 153, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 74, 90, 104, 106, 102, 120, 152, 121, 153, 10, 89, 90, 91, 104, 134, 121, 137, 119, 118, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 89, 90, 105, 121, 118, 120, 153, 134, 136, 10, 89, 91, 105, 121, 118, 120, 153, 134, 136, 10, 88, 89, 91, 121, 134, 134, 153, 121, 121, 10, 91, 104, 105, 106, 103, 103, 152, 152, 136, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 74, 90, 105, 106, 102, 120, 152, 121, 153, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 89, 90, 105, 121, 118, 120, 153, 134, 136, 10, 74, 90, 105, 106, 102, 120, 152, 121, 153, 10, 88, 89, 90, 121, 134, 134, 153, 120, 135, 10, 90, 104, 105, 106, 103, 103, 152, 152, 153, 10, 89, 90, 91, 105, 134, 121, 137, 119, 118, 10, 104, 105, 106, 107, 150, 134, 151, 120, 136, 10, 73, 89, 105, 122, 102, 120, 153, 120, 153, 10, 88, 89, 90, 122, 134, 118, 153, 120, 136, 10, 89, 105, 106, 107, 150, 103, 152, 119, 120, 10, 104, 105, 106, 107, 150, 118, 152, 119, 120, 10, 73, 89, 105, 123, 102, 120, 153, 120, 136, 10, 88, 89, 90, 123, 134, 118, 153, 120, 136, 10, 74, 90, 106, 120, 102, 120, 153, 120, 136, 10, 74, 75, 106, 120, 118, 120, 153, 134, 136, 10, 89, 90, 91, 120, 134, 135, 153, 120, 134, 10, 74, 90, 106, 121, 102, 120, 153, 120, 136, 10, 74, 75, 106, 121, 118, 120, 153, 134, 136, 10, 89, 90, 91, 121, 134, 135, 153, 120, 134, 10, 91, 104, 105, 106, 103, 105, 135, 152, 153, 10, 89, 91, 105, 121, 118, 120, 153, 134, 136, 10, 91, 104, 105, 106, 103, 104, 151, 152, 153, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 74, 90, 105, 106, 102, 120, 152, 121, 153, 10, 74, 90, 106, 122, 102, 120, 153, 120, 153, 10, 89, 90, 105, 121, 118, 120, 153, 134, 136, 10, 74, 90, 105, 106, 102, 120, 152, 121, 153, 10, 89, 90, 91, 105, 134, 121, 137, 119, 118, 10, 90, 104, 105, 106, 103, 104, 151, 152, 153, 10, 104, 105, 106, 107, 150, 135, 150, 120, 153, 10 }
      numgrp = ArrayInt32 { 0, 0, 0, 0, 6, 30, 180, 1260, 10080, 90720 }
      this.numgrp = numgrp
    end
    __ctor1__ = function (this, d, powvPath, postPath)
      __ctor2__(this, d, SystemIO.File.ReadAllBytes(powvPath), SystemIO.File.ReadAllBytes(postPath))
    end
    __ctor2__ = function (this, d, powv, post)
      __ctor3__(this, d, class.ByteReader.NewReadByte(powv), class.ByteReader.NewReadByte(post))
    end
    __ctor3__ = function (this, d, readBytePowv, readBytePost)
      if d < 4 or d > 9 then
        System.throw(System.ArgumentOutOfRangeException("d" --[[nameof(d)]], nil, nil, d, "The degree for the look-up table must be between 4 and 9, inclusive."))
      end

      if d <= 7 then
        this.MGROUP = 1260 --[[5040 / 4]]
        -- 7! = 5040
        this.MPOWV = 15
      elseif d == 8 then
        this.MGROUP = 10080 --[[40320 / 4]]
        -- 8! = 40320
        this.MPOWV = 33
      elseif d == 9 then
        this.MGROUP = 90720 --[[362880 / 4]]
        -- 9! = 362880
        this.MPOWV = 79
      else
        System.throw(System.NotImplementedException())
      end

      this.D = d
      this.LUT = ArrayArrayCsoln2({ this.D + 1, this.MGROUP })
      -- storing 4 .. D
      this.numsoln = ArrayInt322({ this.D + 1, this.MGROUP })

      readLUT(this, readBytePowv, readBytePost)
    end
    getDegree6 = function ()
      return System.new(class, 2, 6, POWV6, POST6)
    end
    readLUT = function (this, readBytePowv, readBytePost)
      local charnum = ArrayChar(256)
      local lineBuf = ArrayChar(32)
      local linep
      local c
      local number = ArrayInt32(1)

      for i = 0, 255 do
        if 48 --[['0']] <= i and i <= 57 --[['9']] then
          charnum:set(i, System.toUInt16(i - 48 --[['0']]))
        elseif i >= 65 --[['A']] then
          charnum:set(i, System.toUInt16(i - 65 --[['A']] + 10))
        else
          charnum:set(i, 0 --[['\0']] --[[(char)0]])
        end
      end

      for d = 4, this.D do
        -- d=%d\n
        linep = readLine(this, readBytePowv, lineBuf)
        linep = scanString(this, lineBuf, linep, "d=")
        linep = scanNumber(this, lineBuf, linep, number)
        d = number:get(0)
        scanEOL(this, lineBuf, linep)

        -- d=%d\n
        linep = readLine(this, readBytePost, lineBuf)
        linep = scanString(this, lineBuf, linep, "d=")
        linep = scanNumber(this, lineBuf, linep, number)
        d = number:get(0)
        scanEOL(this, lineBuf, linep)

        do
          local k = 0
          while k < numgrp:get(d) do
            local ns = charnum:get(System.band(readBytePowv(), 0xff))

            if ns == 0 then
              -- same as some previous group
              -- %d\n
              linep = readLine(this, readBytePowv, lineBuf)
              linep = scanNumber(this, lineBuf, linep, number)
              local kk = number:get(0)
              scanEOL(this, lineBuf, linep)
              this.numsoln:set(d, k, this.numsoln:get(d, kk))
              this.LUT:set(d, k, this.LUT:get(d, kk))
            else
              readBytePowv()
              -- '\n'
              this.numsoln:set(d, k, ns)
              local p = ArrayCsoln(ns)
              for i = 0, ns - 1 do
                p:set(i, KnapcodeFluteSharp.Csoln(this.D))
              end
              local poffset = 0
              -- C# workaround for C-style pointer arithmetic on 'p'
              this.LUT:set(d, k, p)
              for i = 1, ns do
                linep = readLine(this, readBytePowv, lineBuf)
                local default = linep
                linep = default + 1
                p:get(poffset).parent = System.toByte(charnum:get(lineBuf:get(default)))
                local j = 0
                while true do
                  local extern = linep
                  linep = extern + 1
                  local b = System.toByte(charnum:get(lineBuf:get(extern)))
                  local ref = j
                  j = ref + 1
                  p:get(poffset).seg:set(ref, b)
                  if b == 0 then
                    break
                  end
                end
                j = 10
                while true do
                  local extern = linep
                  linep = extern + 1
                  local b = System.toByte(charnum:get(lineBuf:get(extern)))
                  local ref = j
                  j = ref - 1
                  p:get(poffset).seg:set(ref, b)
                  if b == 0 then
                    break
                  end
                end
                local nn = 2 * d - 2
                readChars(this, readBytePost, lineBuf, d - 2)
                linep = 0
                do
                  j = d
                  while j < nn do
                    local extern = linep
                    linep = extern + 1
                    c = charnum:get(lineBuf:get(extern))
                    p:get(poffset).rowcol:set(j - d, System.toByte(c))
                    j = j + 1
                  end
                end
                readChars(this, readBytePost, lineBuf, System.div(nn, 2) + 1)
                -- last char \n
                linep = 0
                do
                  j = 0
                  while j < nn do
                    local extern = linep
                    linep = extern + 1
                    c = lineBuf:get(extern)
                    local ref = j
                    j = ref + 1
                    p:get(poffset).neighbor:set(ref, System.toByte(System.div(c, 16)))
                    local out = j
                    j = out + 1
                    p:get(poffset).neighbor:set(out, System.toByte(System.mod(c, 16)))
                  end
                end
                poffset = poffset + 1
              end
            end
            k = k + 1
          end
        end
      end
    end
    readLine = function (this, readByte, buf)
      local c
      local i = 0
      while true do
        c = readByte()
        if not (c ~= - 1) then
          break
        end
        if c == 10 --[['\n']] then
          buf:set(i, 10 --[['\n']])
          break
        end
        local default = i
        i = default + 1
        buf:set(default, System.toUInt16(System.band(c, 0xff)))
      end
      return 0
    end
    readChars = function (this, readByte, buf, count)
      for i = 0, count - 1 do
        buf:set(i, System.toUInt16(System.band(readByte(), 0xff)))
      end
    end
    scanNumber = function (this, buf, offset, result)
      local default = offset
      offset = default + 1
      local c = buf:get(default)
      if not isDigit(this, c) then
        System.throw(SystemIO.InvalidDataException("Reading error. Expected digit but got '" .. c .. "'."))
      end
      local number = c - 48 --[['0']]
      while true do
        local extern = offset
        offset = extern + 1
        c = buf:get(extern)
        if not isDigit(this, c) then
          break
        end
        number = number * 10 + (c - 48 --[['0']])
      end
      result:set(0, number)
      return offset - 1
    end
    scanString = function (this, buf, offset, str)
      local len = #str
      for i = 0, len - 1 do
        local c = buf:get(offset + i)
        if c ~= str:get(i) then
          System.throw(SystemIO.InvalidDataException("Reading error. Expected '" .. string.char(str:get(i)) .. "' but got '" .. c .. "'."))
        end
      end
      return offset + len
    end
    scanEOL = function (this, buf, offset)
      if buf:get(offset) ~= 10 --[['\n']] then
        System.throw(SystemIO.InvalidDataException("Reading error. Expected EOL but got '" .. string.char(buf:get(offset)) .. "'."))
      end
    end
    isDigit = function (this, c)
      return 48 --[['0']] <= c and c <= 57 --[['9']]
    end
    class = {
      getDegree6 = getDegree6,
      MGROUP = 0,
      D = 0,
      MPOWV = 0,
      static = static,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      }
    }
    return class
  end)
end)
