-- Generated by CSharp.lua Compiler
local System = System
local KnapcodeFluteSharp
local ListPoint
local DictPointBoolean
local DictPointListPoint
local DictPointDictPointBoolean
System.import(function (out)
  KnapcodeFluteSharp = Knapcode.FluteSharp
  ListPoint = System.List(KnapcodeFluteSharp.Point)
  DictPointBoolean = System.Dictionary(KnapcodeFluteSharp.Point, System.Boolean)
  DictPointListPoint = System.Dictionary(KnapcodeFluteSharp.Point, ListPoint)
  DictPointDictPointBoolean = System.Dictionary(KnapcodeFluteSharp.Point, DictPointBoolean)
end)
System.namespace("Knapcode.FluteSharp", function (namespace)
  namespace.class("Tree", function (namespace)
    local GetNeighbors, __ctor__
    __ctor__ = function (this)
      this.Branch = System.Array.Empty(KnapcodeFluteSharp.Branch)
    end
    GetNeighbors = function (this)
      local pointToNeighbors = DictPointListPoint()
      local pointToAdded = DictPointDictPointBoolean()

      local function GetOrAddPoint(point) 
        local added
        local default, neighbors = pointToNeighbors:TryGetValue(point:__clone__(), nil)
        if not default then
          neighbors = ListPoint()
          added = DictPointBoolean()
          pointToNeighbors:AddKeyValue(point:__clone__(), neighbors)
          pointToAdded:AddKeyValue(point:__clone__(), added)
        else
          added = pointToAdded:get(point:__clone__())
        end

        return System.ValueTuple(neighbors, added)
      end

      for i = 0, #this.Branch - 1 do
        local continue
        repeat
          local branch = this.Branch:get(i)
          if branch.N == i then
            continue = true
            break
          end

          local nextBranch = this.Branch:get(branch.N)

          local point = KnapcodeFluteSharp.Point(branch.X, branch.Y)
          local nextPoint = KnapcodeFluteSharp.Point(nextBranch.X, nextBranch.Y)

          if not point:Equals(nextPoint:__clone__()) then
            local neighbors, added = GetOrAddPoint(point:__clone__()):Deconstruct()
            local nextNeighbors, nextAdded = GetOrAddPoint(nextPoint:__clone__()):Deconstruct()

            if added:TryAdd(nextPoint:__clone__(), true) then
              neighbors:Add(nextPoint:__clone__())
            end

            if nextAdded:TryAdd(nextPoint:__clone__(), true) then
              nextNeighbors:Add(nextPoint:__clone__())
            end
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      return pointToNeighbors
    end
    return {
      Deg = 0,
      Length = 0,
      GetNeighbors = GetNeighbors,
      __ctor__ = __ctor__
    }
  end)
end)
